defmodule CaseManager.Repo.Migrations.UpdateUserJoins do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    drop(constraint("company_users", "company_users_pkey"))

    rename(table(:company_users), :id, to: :company_id)

    alter table(:company_users) do
      remove(:soc_id)
      remove(:updated_at)
      remove(:inserted_at)
      modify(:user_id, :uuid, primary_key: true)

      modify(
        :company_id,
        references(:companies, column: :id, name: "company_users_company_id_fkey", type: :uuid, prefix: "public"),
        default: nil
      )
    end

    drop(constraint("soc_users", "soc_users_pkey"))

    alter table(:soc_users) do
      remove(:updated_at)
      remove(:inserted_at)
      modify(:soc_id, :uuid, primary_key: true)
      modify(:user_id, :uuid, primary_key: true)
      remove(:id)
    end
  end

  def down do
    drop(constraint("soc_users", "soc_users_pkey"))

    drop(constraint("company_users", "company_users_pkey"))

    alter table(:soc_users) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      modify(:user_id, :uuid, primary_key: false)
      modify(:soc_id, :uuid, primary_key: false)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    drop(constraint(:company_users, "company_users_company_id_fkey"))

    alter table(:company_users) do
      modify(:id, :uuid, default: fragment("gen_random_uuid()"))
      modify(:user_id, :uuid, primary_key: false)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :soc_id,
        references(:companies, column: :id, name: "company_users_soc_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    rename(table(:company_users), :company_id, to: :id)
  end
end
