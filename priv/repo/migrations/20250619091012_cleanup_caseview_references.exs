defmodule CaseManager.Repo.Migrations.CleanupCaseviewReferences do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    execute("""
    DROP FUNCTION IF EXISTS cleanup_case_views_on_comment_delete();
    """)

    execute("""
    DROP TRIGGER IF EXISTS trigger_cleanup_case_views_on_comment_delete ON comments;
    """)

    drop(constraint(:case_views, "case_views_case_id_fkey"))

    alter table(:case_views) do
      modify(
        :case_id,
        references(:cases,
          column: :id,
          name: "case_views_case_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all,
          on_update: :update_all
        )
      )
    end
  end

  def down do
    drop(constraint(:case_views, "case_views_case_id_fkey"))

    alter table(:case_views) do
      modify(:case_id, references(:cases, column: :id, name: "case_views_case_id_fkey", type: :uuid, prefix: "public"))
    end

    execute("""
    CREATE TRIGGER trigger_cleanup_case_views_on_comment_delete
      AFTER DELETE ON comments
      FOR EACH ROW
      EXECUTE FUNCTION cleanup_case_views_on_comment_delete();
    """)

    execute("""
    CREATE OR REPLACE FUNCTION cleanup_case_views_on_comment_delete()
    RETURNS TRIGGER AS $$
    BEGIN
      -- Delete case_views for the same case_id and visibility as the deleted comment
      DELETE FROM case_views
      WHERE case_id = OLD.case_id
        AND visibility = OLD.visibility;

      RETURN OLD;
    END;
    $$ LANGUAGE plpgsql;
    """)
  end
end
