defmodule CaseManager.Repo.Migrations.InitialMigration do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)
      add(:first_name, :text, null: false)
      add(:last_name, :text, null: false)
    end

    create unique_index(:users, [:email], name: "users_unique_email_index")

    create table(:tokens, primary_key: false) do
      add(:jti, :text, null: false, primary_key: true)
      add(:subject, :text, null: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:purpose, :text, null: false)
      add(:extra_data, :map)
      add(:created_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create table(:socs, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
    end

    create table(:soc_users, primary_key: false) do
      add(:user_role, :text)

      add(:user_id, references(:users, column: :id, name: "soc_users_user_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )

      add(:soc_id, references(:socs, column: :id, name: "soc_users_soc_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )
    end

    create table(:soc_company_accesses, primary_key: false) do
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :soc_id,
        references(:socs, column: :id, name: "soc_company_accesses_soc_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )

      add(:company_id, :uuid, null: false, primary_key: true)
    end

    create table(:files, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:filename, :text, null: false)
      add(:content_type, :text, null: false)
      add(:binary_data, :binary, null: false)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:case_id, :uuid)
    end

    create table(:company_users, primary_key: false) do
      add(:user_role, :text)

      add(:user_id, references(:users, column: :id, name: "company_users_user_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )

      add(:company_id, :uuid, null: false, primary_key: true)
    end

    create table(:companies, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:soc_company_accesses) do
      modify(
        :company_id,
        references(:companies, column: :id, name: "soc_company_accesses_company_id_fkey", type: :uuid, prefix: "public")
      )
    end

    alter table(:company_users) do
      modify(
        :company_id,
        references(:companies, column: :id, name: "company_users_company_id_fkey", type: :uuid, prefix: "public")
      )
    end

    alter table(:companies) do
      add(:name, :text, null: false)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:soc_id, references(:socs, column: :id, name: "companies_soc_id_fkey", type: :uuid, prefix: "public"))
    end

    create table(:comments, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:body, :text, null: false)
      add(:visibility, :text, null: false, default: "internal")
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:case_id, :uuid)
      add(:alert_id, :uuid)
      add(:user_id, :uuid, null: false)
    end

    create table(:cases, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:files) do
      modify(:case_id, references(:cases, column: :id, name: "files_case_id_fkey", type: :uuid, prefix: "public"))
    end

    alter table(:comments) do
      modify(:case_id, references(:cases, column: :id, name: "comments_case_id_fkey", type: :uuid, prefix: "public"))
    end

    alter table(:cases) do
      add(:title, :text, null: false)
      add(:description, :text)
      add(:status, :text, null: false, default: "new")
      add(:resolution_type, :text)
      add(:severity, :text)
      add(:escalated, :boolean)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:reporter_id, references(:users, column: :id, name: "cases_reporter_id_fkey", type: :uuid, prefix: "public"))
      add(:assignee_id, references(:users, column: :id, name: "cases_assignee_id_fkey", type: :uuid, prefix: "public"))

      add(
        :company_id,
        references(:companies, column: :id, name: "cases_company_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )

      add(:soc_id, references(:socs, column: :id, name: "cases_soc_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create table(:case_alerts, primary_key: false) do
      add(:case_id, references(:cases, column: :id, name: "case_alerts_case_id_fkey", type: :uuid, prefix: "public"),
        primary_key: true,
        null: false
      )

      add(:alert_id, :uuid, null: false, primary_key: true)
    end

    create table(:alerts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:comments) do
      modify(:alert_id, references(:alerts, column: :id, name: "comments_alert_id_fkey", type: :uuid, prefix: "public"))
      modify(:user_id, references(:users, column: :id, name: "comments_user_id_fkey", type: :uuid, prefix: "public"))
    end

    alter table(:case_alerts) do
      modify(
        :alert_id,
        references(:alerts, column: :id, name: "case_alerts_alert_id_fkey", type: :uuid, prefix: "public")
      )
    end

    alter table(:alerts) do
      add(:alert_id, :text, null: false)
      add(:title, :text, null: false)
      add(:description, :text)
      add(:severity, :text, null: false)
      add(:status, :text, null: false, default: "new")
      add(:creation_time, :utc_datetime, null: false)
      add(:link, :text, null: false)
      add(:additional_data, :map)
      add(:inserted_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:updated_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(
        :company_id,
        references(:companies, column: :id, name: "alerts_company_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end
  end

  def down do
    drop(constraint(:alerts, "alerts_company_id_fkey"))

    alter table(:alerts) do
      remove(:company_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:additional_data)
      remove(:link)
      remove(:creation_time)
      remove(:status)
      remove(:severity)
      remove(:description)
      remove(:title)
      remove(:alert_id)
    end

    drop(constraint(:case_alerts, "case_alerts_alert_id_fkey"))

    alter table(:case_alerts) do
      modify(:alert_id, :uuid)
    end

    drop(constraint(:comments, "comments_alert_id_fkey"))

    drop(constraint(:comments, "comments_user_id_fkey"))

    alter table(:comments) do
      modify(:user_id, :uuid)
      modify(:alert_id, :uuid)
    end

    drop(table(:alerts))

    drop(constraint(:case_alerts, "case_alerts_case_id_fkey"))

    drop(table(:case_alerts))

    drop(constraint(:cases, "cases_reporter_id_fkey"))

    drop(constraint(:cases, "cases_assignee_id_fkey"))

    drop(constraint(:cases, "cases_company_id_fkey"))

    drop(constraint(:cases, "cases_soc_id_fkey"))

    alter table(:cases) do
      remove(:soc_id)
      remove(:company_id)
      remove(:assignee_id)
      remove(:reporter_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:escalated)
      remove(:severity)
      remove(:resolution_type)
      remove(:status)
      remove(:description)
      remove(:title)
    end

    drop(constraint(:comments, "comments_case_id_fkey"))

    alter table(:comments) do
      modify(:case_id, :uuid)
    end

    drop(constraint(:files, "files_case_id_fkey"))

    alter table(:files) do
      modify(:case_id, :uuid)
    end

    drop(table(:cases))

    drop(table(:comments))

    drop(constraint(:companies, "companies_soc_id_fkey"))

    alter table(:companies) do
      remove(:soc_id)
      remove(:updated_at)
      remove(:inserted_at)
      remove(:name)
    end

    drop(constraint(:company_users, "company_users_company_id_fkey"))

    alter table(:company_users) do
      modify(:company_id, :uuid)
    end

    drop(constraint(:soc_company_accesses, "soc_company_accesses_company_id_fkey"))

    alter table(:soc_company_accesses) do
      modify(:company_id, :uuid)
    end

    drop(table(:companies))

    drop(constraint(:company_users, "company_users_user_id_fkey"))

    drop(table(:company_users))

    drop(table(:files))

    drop(constraint(:soc_company_accesses, "soc_company_accesses_soc_id_fkey"))

    drop(table(:soc_company_accesses))

    drop(constraint(:soc_users, "soc_users_user_id_fkey"))

    drop(constraint(:soc_users, "soc_users_soc_id_fkey"))

    drop(table(:soc_users))

    drop(table(:socs))

    drop(table(:tokens))

    drop_if_exists(unique_index(:users, [:email], name: "users_unique_email_index"))

    drop(table(:users))
  end
end
