defmodule CaseManager.Repo.Migrations.AddCaseViews do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:case_views, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:visibility, :text, null: false, default: "public")
      add(:last_viewed_at, :utc_datetime_usec, null: false, default: fragment("(now() AT TIME ZONE 'utc')"))

      add(:user_id, references(:users, column: :id, name: "case_views_user_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )

      add(:case_id, references(:cases, column: :id, name: "case_views_case_id_fkey", type: :uuid, prefix: "public"),
        null: false
      )
    end

    create unique_index(:case_views, [:user_id, :case_id, :visibility],
             name: "case_views_unique_user_case_visibility_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:case_views, [:user_id, :case_id, :visibility], name: "case_views_unique_user_case_visibility_index")
    )

    drop(constraint(:case_views, "case_views_user_id_fkey"))

    drop(constraint(:case_views, "case_views_case_id_fkey"))

    drop(table(:case_views))
  end
end
