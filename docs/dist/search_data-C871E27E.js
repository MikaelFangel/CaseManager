searchData={"items":[{"type":"module","title":"CaseManager","doc":"CaseManager keeps the contexts that define your domain\nand business logic.\n\nContexts are also responsible for managing your data, regardless\nif it comes from the database, an external API or others.","ref":"CaseManager.html"},{"type":"module","title":"CaseManager.Configuration","doc":"Domain that controls everything related to app configuration.","ref":"CaseManager.Configuration.html"},{"type":"function","title":"CaseManager.Configuration.add_setting/4","doc":"Calls the set_setting action on CaseManager.Configuration.Setting.\n# Arguments\n* key\n* value","ref":"CaseManager.Configuration.html#add_setting/4"},{"type":"function","title":"Options - CaseManager.Configuration.add_setting/4","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Configuration.html#add_setting/4-options"},{"type":"function","title":"CaseManager.Configuration.add_setting!/4","doc":"Calls the set_setting action on CaseManager.Configuration.Setting.\nRaises any errors instead of returning them\n# Arguments\n* key\n* value","ref":"CaseManager.Configuration.html#add_setting!/4"},{"type":"function","title":"Options - CaseManager.Configuration.add_setting!/4","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Configuration.html#add_setting!/4-options"},{"type":"function","title":"CaseManager.Configuration.can_add_setting/5","doc":"Runs authorization checks for `CaseManager.Configuration.Setting.set_setting`\nSee `Ash.can/3` for more information","ref":"CaseManager.Configuration.html#can_add_setting/5"},{"type":"function","title":"Options - CaseManager.Configuration.can_add_setting/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Configuration.html#can_add_setting/5-options"},{"type":"function","title":"CaseManager.Configuration.can_add_setting?/5","doc":"Runs authorization checks for `CaseManager.Configuration.Setting.set_setting`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Configuration.html#can_add_setting?/5"},{"type":"function","title":"Options - CaseManager.Configuration.can_add_setting?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Configuration.html#can_add_setting?/5-options"},{"type":"function","title":"CaseManager.Configuration.can_upload_file_to_setting/6","doc":"Runs authorization checks for `CaseManager.Configuration.Setting.upload_file`\nSee `Ash.can/3` for more information","ref":"CaseManager.Configuration.html#can_upload_file_to_setting/6"},{"type":"function","title":"Options - CaseManager.Configuration.can_upload_file_to_setting/6","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Configuration.html#can_upload_file_to_setting/6-options"},{"type":"function","title":"CaseManager.Configuration.can_upload_file_to_setting?/6","doc":"Runs authorization checks for `CaseManager.Configuration.Setting.upload_file`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Configuration.html#can_upload_file_to_setting?/6"},{"type":"function","title":"Options - CaseManager.Configuration.can_upload_file_to_setting?/6","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Configuration.html#can_upload_file_to_setting?/6-options"},{"type":"function","title":"CaseManager.Configuration.changeset_to_add_setting/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Configuration.html#changeset_to_add_setting/4"},{"type":"function","title":"Options - CaseManager.Configuration.changeset_to_add_setting/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.","ref":"CaseManager.Configuration.html#changeset_to_add_setting/4-options"},{"type":"function","title":"CaseManager.Configuration.changeset_to_upload_file_to_setting/5","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Configuration.html#changeset_to_upload_file_to_setting/5"},{"type":"function","title":"Options - CaseManager.Configuration.changeset_to_upload_file_to_setting/5","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.","ref":"CaseManager.Configuration.html#changeset_to_upload_file_to_setting/5-options"},{"type":"function","title":"CaseManager.Configuration.default_short_name/0","doc":"","ref":"CaseManager.Configuration.html#default_short_name/0"},{"type":"function","title":"CaseManager.Configuration.upload_file_to_setting/5","doc":"Calls the upload_file action on CaseManager.Configuration.Setting.\n# Arguments\n* key\n* value\n* file","ref":"CaseManager.Configuration.html#upload_file_to_setting/5"},{"type":"function","title":"Options - CaseManager.Configuration.upload_file_to_setting/5","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Configuration.html#upload_file_to_setting/5-options"},{"type":"function","title":"CaseManager.Configuration.upload_file_to_setting!/5","doc":"Calls the upload_file action on CaseManager.Configuration.Setting.\nRaises any errors instead of returning them\n# Arguments\n* key\n* value\n* file","ref":"CaseManager.Configuration.html#upload_file_to_setting!/5"},{"type":"function","title":"Options - CaseManager.Configuration.upload_file_to_setting!/5","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Configuration.html#upload_file_to_setting!/5-options"},{"type":"module","title":"CaseManager.Configuration.File","doc":"Resource for file uploads.","ref":"CaseManager.Configuration.File.html"},{"type":"function","title":"CaseManager.Configuration.File.default_short_name/0","doc":"","ref":"CaseManager.Configuration.File.html#default_short_name/0"},{"type":"function","title":"CaseManager.Configuration.File.input/1","doc":"Validates that the keys in the provided input are valid for at least one action on the resource.\n\nRaises a KeyError error at compile time if not. This exists because generally a struct should only ever\nbe created by Ash as a result of a successful action. You should not be creating records manually in code,\ne.g `%MyResource{value: 1, value: 2}`. Generally that is fine, but often with embedded resources it is nice\nto be able to validate the keys that are being provided, e.g\n\n```elixir\nResource\n|> Ash.Changeset.for_create(:create, %{embedded: EmbeddedResource.input(foo: 1, bar: 2)})\n|> Ash.create()\n```","ref":"CaseManager.Configuration.File.html#input/1"},{"type":"function","title":"CaseManager.Configuration.File.input/2","doc":"Same as `input/1`, except restricts the keys to values accepted by the action provided.","ref":"CaseManager.Configuration.File.html#input/2"},{"type":"function","title":"CaseManager.Configuration.File.primary_key_matches?/2","doc":"","ref":"CaseManager.Configuration.File.html#primary_key_matches?/2"},{"type":"type","title":"CaseManager.Configuration.File.t/0","doc":"","ref":"CaseManager.Configuration.File.html#t:t/0"},{"type":"module","title":"CaseManager.Configuration.Setting","doc":"Resource used to store application wide settings in a persitent manner.","ref":"CaseManager.Configuration.Setting.html"},{"type":"function","title":"CaseManager.Configuration.Setting.default_short_name/0","doc":"","ref":"CaseManager.Configuration.Setting.html#default_short_name/0"},{"type":"function","title":"CaseManager.Configuration.Setting.input/1","doc":"Validates that the keys in the provided input are valid for at least one action on the resource.\n\nRaises a KeyError error at compile time if not. This exists because generally a struct should only ever\nbe created by Ash as a result of a successful action. You should not be creating records manually in code,\ne.g `%MyResource{value: 1, value: 2}`. Generally that is fine, but often with embedded resources it is nice\nto be able to validate the keys that are being provided, e.g\n\n```elixir\nResource\n|> Ash.Changeset.for_create(:create, %{embedded: EmbeddedResource.input(foo: 1, bar: 2)})\n|> Ash.create()\n```","ref":"CaseManager.Configuration.Setting.html#input/1"},{"type":"function","title":"CaseManager.Configuration.Setting.input/2","doc":"Same as `input/1`, except restricts the keys to values accepted by the action provided.","ref":"CaseManager.Configuration.Setting.html#input/2"},{"type":"function","title":"CaseManager.Configuration.Setting.primary_key_matches?/2","doc":"","ref":"CaseManager.Configuration.Setting.html#primary_key_matches?/2"},{"type":"type","title":"CaseManager.Configuration.Setting.t/0","doc":"","ref":"CaseManager.Configuration.Setting.html#t:t/0"},{"type":"module","title":"CaseManager.ICM","doc":"Incident case management (ICM) represents the domain with the alerts and the related case management\nhereunder the documentation of the investigations.\n\n\nResources related to incident case management (ICM).","ref":"CaseManager.ICM.html"},{"type":"function","title":"CaseManager.ICM.add_alert/2","doc":"Submit an alert.\n# Inputs\n* link\n* description\n* title\n* team_id\n* alert_id\n* risk_level\n* creation_time\n* additional_data","ref":"CaseManager.ICM.html#add_alert/2"},{"type":"function","title":"Options - CaseManager.ICM.add_alert/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_alert/2-options"},{"type":"function","title":"CaseManager.ICM.add_alert!/2","doc":"Submit an alert.\nRaises any errors instead of returning them\n# Inputs\n* link\n* description\n* title\n* team_id\n* alert_id\n* risk_level\n* creation_time\n* additional_data","ref":"CaseManager.ICM.html#add_alert!/2"},{"type":"function","title":"Options - CaseManager.ICM.add_alert!/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_alert!/2-options"},{"type":"function","title":"CaseManager.ICM.add_comment_to_case/4","doc":"Comment on the case.\n# Arguments\n* body","ref":"CaseManager.ICM.html#add_comment_to_case/4"},{"type":"function","title":"Options - CaseManager.ICM.add_comment_to_case/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_comment_to_case/4-options"},{"type":"function","title":"CaseManager.ICM.add_comment_to_case!/4","doc":"Comment on the case.\nRaises any errors instead of returning them\n# Arguments\n* body","ref":"CaseManager.ICM.html#add_comment_to_case!/4"},{"type":"function","title":"Options - CaseManager.ICM.add_comment_to_case!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_comment_to_case!/4-options"},{"type":"function","title":"CaseManager.ICM.add_enrichment_to_alert/3","doc":"Adds an enrichment to the alert\n# Inputs\n* enrichment","ref":"CaseManager.ICM.html#add_enrichment_to_alert/3"},{"type":"function","title":"Options - CaseManager.ICM.add_enrichment_to_alert/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_enrichment_to_alert/3-options"},{"type":"function","title":"CaseManager.ICM.add_enrichment_to_alert!/3","doc":"Adds an enrichment to the alert\nRaises any errors instead of returning them\n# Inputs\n* enrichment","ref":"CaseManager.ICM.html#add_enrichment_to_alert!/3"},{"type":"function","title":"Options - CaseManager.ICM.add_enrichment_to_alert!/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#add_enrichment_to_alert!/3-options"},{"type":"function","title":"CaseManager.ICM.assign_case/4","doc":"Assign a case to a user.\n# Arguments\n* assignee","ref":"CaseManager.ICM.html#assign_case/4"},{"type":"function","title":"Options - CaseManager.ICM.assign_case/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#assign_case/4-options"},{"type":"function","title":"CaseManager.ICM.assign_case!/4","doc":"Assign a case to a user.\nRaises any errors instead of returning them\n# Arguments\n* assignee","ref":"CaseManager.ICM.html#assign_case!/4"},{"type":"function","title":"Options - CaseManager.ICM.assign_case!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#assign_case!/4-options"},{"type":"function","title":"CaseManager.ICM.can_add_alert/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.create`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_add_alert/3"},{"type":"function","title":"Options - CaseManager.ICM.can_add_alert/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_alert/3-options"},{"type":"function","title":"CaseManager.ICM.can_add_alert?/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.create`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_add_alert?/3"},{"type":"function","title":"Options - CaseManager.ICM.can_add_alert?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_alert?/3-options"},{"type":"function","title":"CaseManager.ICM.can_add_comment_to_case/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.add_comment`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_add_comment_to_case/5"},{"type":"function","title":"Options - CaseManager.ICM.can_add_comment_to_case/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_comment_to_case/5-options"},{"type":"function","title":"CaseManager.ICM.can_add_comment_to_case?/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.add_comment`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_add_comment_to_case?/5"},{"type":"function","title":"Options - CaseManager.ICM.can_add_comment_to_case?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_comment_to_case?/5-options"},{"type":"function","title":"CaseManager.ICM.can_add_enrichment_to_alert/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.add_enrichment`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_add_enrichment_to_alert/4"},{"type":"function","title":"Options - CaseManager.ICM.can_add_enrichment_to_alert/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_enrichment_to_alert/4-options"},{"type":"function","title":"CaseManager.ICM.can_add_enrichment_to_alert?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.add_enrichment`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_add_enrichment_to_alert?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_add_enrichment_to_alert?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_add_enrichment_to_alert?/4-options"},{"type":"function","title":"CaseManager.ICM.can_assign_case/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.set_assignee`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_assign_case/5"},{"type":"function","title":"Options - CaseManager.ICM.can_assign_case/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_assign_case/5-options"},{"type":"function","title":"CaseManager.ICM.can_assign_case?/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.set_assignee`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_assign_case?/5"},{"type":"function","title":"Options - CaseManager.ICM.can_assign_case?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_assign_case?/5-options"},{"type":"function","title":"CaseManager.ICM.can_escalate_case/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.escalate`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_escalate_case/4"},{"type":"function","title":"Options - CaseManager.ICM.can_escalate_case/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_escalate_case/4-options"},{"type":"function","title":"CaseManager.ICM.can_escalate_case?/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.escalate`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_escalate_case?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_escalate_case?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_escalate_case?/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_alert_by_id/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.read`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_get_alert_by_id/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_alert_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_alert_by_id/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_alert_by_id?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.read`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_get_alert_by_id?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_alert_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_alert_by_id?/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_case_by_id/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.read_paginated`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_get_case_by_id/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_case_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_case_by_id/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_case_by_id?/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.read_paginated`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_get_case_by_id?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_case_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_case_by_id?/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_enrichment_by_id/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.read`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_get_enrichment_by_id/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_enrichment_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_enrichment_by_id/4-options"},{"type":"function","title":"CaseManager.ICM.can_get_enrichment_by_id?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.read`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_get_enrichment_by_id?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_get_enrichment_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_get_enrichment_by_id?/4-options"},{"type":"function","title":"CaseManager.ICM.can_list_alerts/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.read_paginated`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_list_alerts/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_alerts/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_alerts/3-options"},{"type":"function","title":"CaseManager.ICM.can_list_alerts?/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.read_paginated`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_list_alerts?/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_alerts?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_alerts?/3-options"},{"type":"function","title":"CaseManager.ICM.can_list_cases/3","doc":"Runs authorization checks for `CaseManager.ICM.Case.read_paginated`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_list_cases/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_cases/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_cases/3-options"},{"type":"function","title":"CaseManager.ICM.can_list_cases?/3","doc":"Runs authorization checks for `CaseManager.ICM.Case.read_paginated`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_list_cases?/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_cases?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_cases?/3-options"},{"type":"function","title":"CaseManager.ICM.can_list_enrichments/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.read`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_list_enrichments/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_enrichments/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_enrichments/3-options"},{"type":"function","title":"CaseManager.ICM.can_list_enrichments?/3","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.read`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_list_enrichments?/3"},{"type":"function","title":"Options - CaseManager.ICM.can_list_enrichments?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_list_enrichments?/3-options"},{"type":"function","title":"CaseManager.ICM.can_remove_alert_from_case/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.remove_alert`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_remove_alert_from_case/5"},{"type":"function","title":"Options - CaseManager.ICM.can_remove_alert_from_case/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_remove_alert_from_case/5-options"},{"type":"function","title":"CaseManager.ICM.can_remove_alert_from_case?/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.remove_alert`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_remove_alert_from_case?/5"},{"type":"function","title":"Options - CaseManager.ICM.can_remove_alert_from_case?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_remove_alert_from_case?/5-options"},{"type":"function","title":"CaseManager.ICM.can_remove_enrichment/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.destroy`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_remove_enrichment/4"},{"type":"function","title":"Options - CaseManager.ICM.can_remove_enrichment/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_remove_enrichment/4-options"},{"type":"function","title":"CaseManager.ICM.can_remove_enrichment?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.destroy`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_remove_enrichment?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_remove_enrichment?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_remove_enrichment?/4-options"},{"type":"function","title":"CaseManager.ICM.can_search_alerts/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.search`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_search_alerts/4"},{"type":"function","title":"Options - CaseManager.ICM.can_search_alerts/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_search_alerts/4-options"},{"type":"function","title":"CaseManager.ICM.can_search_alerts?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.search`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_search_alerts?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_search_alerts?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_search_alerts?/4-options"},{"type":"function","title":"CaseManager.ICM.can_search_cases/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.search`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_search_cases/4"},{"type":"function","title":"Options - CaseManager.ICM.can_search_cases/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_search_cases/4-options"},{"type":"function","title":"CaseManager.ICM.can_search_cases?/4","doc":"Runs authorization checks for `CaseManager.ICM.Case.search`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_search_cases?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_search_cases?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_search_cases?/4-options"},{"type":"function","title":"CaseManager.ICM.can_update_additional_data_on_alert/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.update_additional_data`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_update_additional_data_on_alert/4"},{"type":"function","title":"Options - CaseManager.ICM.can_update_additional_data_on_alert/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_update_additional_data_on_alert/4-options"},{"type":"function","title":"CaseManager.ICM.can_update_additional_data_on_alert?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.update_additional_data`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_update_additional_data_on_alert?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_update_additional_data_on_alert?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_update_additional_data_on_alert?/4-options"},{"type":"function","title":"CaseManager.ICM.can_update_enrichment/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.update`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_update_enrichment/4"},{"type":"function","title":"Options - CaseManager.ICM.can_update_enrichment/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_update_enrichment/4-options"},{"type":"function","title":"CaseManager.ICM.can_update_enrichment?/4","doc":"Runs authorization checks for `CaseManager.ICM.Alert.Enrichment.update`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_update_enrichment?/4"},{"type":"function","title":"Options - CaseManager.ICM.can_update_enrichment?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_update_enrichment?/4-options"},{"type":"function","title":"CaseManager.ICM.can_upload_file_to_case/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.upload_file`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_upload_file_to_case/5"},{"type":"function","title":"Options - CaseManager.ICM.can_upload_file_to_case/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_upload_file_to_case/5-options"},{"type":"function","title":"CaseManager.ICM.can_upload_file_to_case?/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.upload_file`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_upload_file_to_case?/5"},{"type":"function","title":"Options - CaseManager.ICM.can_upload_file_to_case?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_upload_file_to_case?/5-options"},{"type":"function","title":"CaseManager.ICM.can_view_case/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.view`\nSee `Ash.can/3` for more information","ref":"CaseManager.ICM.html#can_view_case/5"},{"type":"function","title":"Options - CaseManager.ICM.can_view_case/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_view_case/5-options"},{"type":"function","title":"CaseManager.ICM.can_view_case?/5","doc":"Runs authorization checks for `CaseManager.ICM.Case.view`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.ICM.html#can_view_case?/5"},{"type":"function","title":"Options - CaseManager.ICM.can_view_case?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.ICM.html#can_view_case?/5-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_add_alert/2","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_add_alert/2"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_add_alert/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.","ref":"CaseManager.ICM.html#changeset_to_add_alert/2-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_add_comment_to_case/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_add_comment_to_case/4"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_add_comment_to_case/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_add_comment_to_case/4-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_add_enrichment_to_alert/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_add_enrichment_to_alert/3"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_add_enrichment_to_alert/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_add_enrichment_to_alert/3-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_assign_case/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_assign_case/4"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_assign_case/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_assign_case/4-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_escalate_case/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_escalate_case/3"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_escalate_case/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_escalate_case/3-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_remove_alert_from_case/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_remove_alert_from_case/4"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_remove_alert_from_case/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_remove_alert_from_case/4-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_remove_enrichment/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_remove_enrichment/3"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_remove_enrichment/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_remove_enrichment/3-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_update_additional_data_on_alert/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_update_additional_data_on_alert/3"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_update_additional_data_on_alert/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_update_additional_data_on_alert/3-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_update_enrichment/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_update_enrichment/3"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_update_enrichment/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_update_enrichment/3-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_upload_file_to_case/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_upload_file_to_case/4"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_upload_file_to_case/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_upload_file_to_case/4-options"},{"type":"function","title":"CaseManager.ICM.changeset_to_view_case/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.ICM.html#changeset_to_view_case/4"},{"type":"function","title":"Options - CaseManager.ICM.changeset_to_view_case/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.ICM.html#changeset_to_view_case/4-options"},{"type":"function","title":"CaseManager.ICM.default_short_name/0","doc":"","ref":"CaseManager.ICM.html#default_short_name/0"},{"type":"function","title":"CaseManager.ICM.escalate_case/3","doc":"Escalate a case and thus make it visible to its related team.","ref":"CaseManager.ICM.html#escalate_case/3"},{"type":"function","title":"Options - CaseManager.ICM.escalate_case/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#escalate_case/3-options"},{"type":"function","title":"CaseManager.ICM.escalate_case!/3","doc":"Escalate a case and thus make it visible to its related team.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#escalate_case!/3"},{"type":"function","title":"Options - CaseManager.ICM.escalate_case!/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#escalate_case!/3-options"},{"type":"function","title":"CaseManager.ICM.form_to_add_alert/1","doc":"Submit an alert.","ref":"CaseManager.ICM.html#form_to_add_alert/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_add_alert/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_add_alert/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_add_alert/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_add_alert/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_add_comment_to_case/2","doc":"Comment on the case.","ref":"CaseManager.ICM.html#form_to_add_comment_to_case/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_add_comment_to_case/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_add_comment_to_case/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_add_comment_to_case/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_add_comment_to_case/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_add_enrichment_to_alert/2","doc":"Adds an enrichment to the alert","ref":"CaseManager.ICM.html#form_to_add_enrichment_to_alert/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_add_enrichment_to_alert/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_add_enrichment_to_alert/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_add_enrichment_to_alert/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_add_enrichment_to_alert/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_assign_case/2","doc":"Assign a case to a user.","ref":"CaseManager.ICM.html#form_to_assign_case/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_assign_case/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_assign_case/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_assign_case/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_assign_case/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_escalate_case/1","doc":"Escalate a case and thus make it visible to its related team.","ref":"CaseManager.ICM.html#form_to_escalate_case/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_escalate_case/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_escalate_case/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_escalate_case/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_escalate_case/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_get_alert_by_id/1","doc":"Creates a form for the read action on CaseManager.ICM.Alert.","ref":"CaseManager.ICM.html#form_to_get_alert_by_id/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_get_alert_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_get_alert_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_get_alert_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_get_alert_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_get_case_by_id/1","doc":"List cases paginated.","ref":"CaseManager.ICM.html#form_to_get_case_by_id/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_get_case_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_get_case_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_get_case_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_get_case_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_get_enrichment_by_id/1","doc":"Creates a form for the read action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#form_to_get_enrichment_by_id/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_get_enrichment_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_get_enrichment_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_get_enrichment_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_get_enrichment_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_list_alerts/1","doc":"List alerts paginated.","ref":"CaseManager.ICM.html#form_to_list_alerts/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_list_alerts/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_list_alerts/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_list_alerts/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_list_alerts/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_list_cases/1","doc":"List cases paginated.","ref":"CaseManager.ICM.html#form_to_list_cases/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_list_cases/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_list_cases/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_list_cases/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_list_cases/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_list_enrichments/1","doc":"Creates a form for the read action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#form_to_list_enrichments/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_list_enrichments/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_list_enrichments/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_list_enrichments/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_list_enrichments/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_remove_alert_from_case/2","doc":"Remove an alert related to the case.","ref":"CaseManager.ICM.html#form_to_remove_alert_from_case/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_remove_alert_from_case/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_remove_alert_from_case/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_remove_alert_from_case/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_remove_alert_from_case/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_remove_enrichment/2","doc":"Creates a form for the destroy action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#form_to_remove_enrichment/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_remove_enrichment/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_remove_enrichment/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_remove_enrichment/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_remove_enrichment/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_search_alerts/1","doc":"Creates a form for the search action on CaseManager.ICM.Alert.","ref":"CaseManager.ICM.html#form_to_search_alerts/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_search_alerts/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_search_alerts/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_search_alerts/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_search_alerts/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_search_cases/1","doc":"Search cases.","ref":"CaseManager.ICM.html#form_to_search_cases/1"},{"type":"function","title":"Options - CaseManager.ICM.form_to_search_cases/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_search_cases/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_search_cases/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_search_cases/1-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_update_additional_data_on_alert/2","doc":"Change the additional related data to the alert.","ref":"CaseManager.ICM.html#form_to_update_additional_data_on_alert/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_update_additional_data_on_alert/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_update_additional_data_on_alert/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_update_additional_data_on_alert/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_update_additional_data_on_alert/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_update_enrichment/2","doc":"Creates a form for the update action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#form_to_update_enrichment/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_update_enrichment/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_update_enrichment/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_update_enrichment/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_update_enrichment/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_upload_file_to_case/2","doc":"Upload a file and relate it to the case.","ref":"CaseManager.ICM.html#form_to_upload_file_to_case/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_upload_file_to_case/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_upload_file_to_case/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_upload_file_to_case/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_upload_file_to_case/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.form_to_view_case/2","doc":"Creates a form for the view action on CaseManager.ICM.Case.","ref":"CaseManager.ICM.html#form_to_view_case/2"},{"type":"function","title":"Options - CaseManager.ICM.form_to_view_case/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.ICM.html#form_to_view_case/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.ICM.form_to_view_case/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.ICM.html#form_to_view_case/2-nested-form-options"},{"type":"function","title":"CaseManager.ICM.get_alert_by_id/3","doc":"Calls the read action on CaseManager.ICM.Alert.","ref":"CaseManager.ICM.html#get_alert_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.get_alert_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_alert_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.get_alert_by_id!/3","doc":"Calls the read action on CaseManager.ICM.Alert.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#get_alert_by_id!/3"},{"type":"function","title":"Options - CaseManager.ICM.get_alert_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_alert_by_id!/3-options"},{"type":"function","title":"CaseManager.ICM.get_case_by_id/3","doc":"List cases paginated.","ref":"CaseManager.ICM.html#get_case_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.get_case_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_case_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.get_case_by_id!/3","doc":"List cases paginated.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#get_case_by_id!/3"},{"type":"function","title":"Options - CaseManager.ICM.get_case_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_case_by_id!/3-options"},{"type":"function","title":"CaseManager.ICM.get_enrichment_by_id/3","doc":"Calls the read action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#get_enrichment_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.get_enrichment_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_enrichment_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.get_enrichment_by_id!/3","doc":"Calls the read action on CaseManager.ICM.Alert.Enrichment.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#get_enrichment_by_id!/3"},{"type":"function","title":"Options - CaseManager.ICM.get_enrichment_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#get_enrichment_by_id!/3-options"},{"type":"function","title":"CaseManager.ICM.json_api_match_route/2","doc":"","ref":"CaseManager.ICM.html#json_api_match_route/2"},{"type":"function","title":"CaseManager.ICM.list_alerts/2","doc":"List alerts paginated.","ref":"CaseManager.ICM.html#list_alerts/2"},{"type":"function","title":"Options - CaseManager.ICM.list_alerts/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_alerts/2-options"},{"type":"function","title":"CaseManager.ICM.list_alerts!/2","doc":"List alerts paginated.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#list_alerts!/2"},{"type":"function","title":"Options - CaseManager.ICM.list_alerts!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_alerts!/2-options"},{"type":"function","title":"CaseManager.ICM.list_cases/2","doc":"List cases paginated.","ref":"CaseManager.ICM.html#list_cases/2"},{"type":"function","title":"Options - CaseManager.ICM.list_cases/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_cases/2-options"},{"type":"function","title":"CaseManager.ICM.list_cases!/2","doc":"List cases paginated.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#list_cases!/2"},{"type":"function","title":"Options - CaseManager.ICM.list_cases!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_cases!/2-options"},{"type":"function","title":"CaseManager.ICM.list_enrichments/2","doc":"Calls the read action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#list_enrichments/2"},{"type":"function","title":"Options - CaseManager.ICM.list_enrichments/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_enrichments/2-options"},{"type":"function","title":"CaseManager.ICM.list_enrichments!/2","doc":"Calls the read action on CaseManager.ICM.Alert.Enrichment.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#list_enrichments!/2"},{"type":"function","title":"Options - CaseManager.ICM.list_enrichments!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#list_enrichments!/2-options"},{"type":"function","title":"CaseManager.ICM.query_to_get_alert_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_get_alert_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.query_to_get_alert_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_get_alert_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.query_to_get_case_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_get_case_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.query_to_get_case_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_get_case_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.query_to_get_enrichment_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_get_enrichment_by_id/3"},{"type":"function","title":"Options - CaseManager.ICM.query_to_get_enrichment_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_get_enrichment_by_id/3-options"},{"type":"function","title":"CaseManager.ICM.query_to_list_alerts/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_list_alerts/2"},{"type":"function","title":"Options - CaseManager.ICM.query_to_list_alerts/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_list_alerts/2-options"},{"type":"function","title":"CaseManager.ICM.query_to_list_cases/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_list_cases/2"},{"type":"function","title":"Options - CaseManager.ICM.query_to_list_cases/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_list_cases/2-options"},{"type":"function","title":"CaseManager.ICM.query_to_list_enrichments/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_list_enrichments/2"},{"type":"function","title":"Options - CaseManager.ICM.query_to_list_enrichments/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_list_enrichments/2-options"},{"type":"function","title":"CaseManager.ICM.query_to_search_alerts/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_search_alerts/3"},{"type":"function","title":"Options - CaseManager.ICM.query_to_search_alerts/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_search_alerts/3-options"},{"type":"function","title":"CaseManager.ICM.query_to_search_cases/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.ICM.html#query_to_search_cases/3"},{"type":"function","title":"Options - CaseManager.ICM.query_to_search_cases/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.ICM.html#query_to_search_cases/3-options"},{"type":"function","title":"CaseManager.ICM.remove_alert_from_case/4","doc":"Remove an alert related to the case.\n# Arguments\n* alert_id","ref":"CaseManager.ICM.html#remove_alert_from_case/4"},{"type":"function","title":"Options - CaseManager.ICM.remove_alert_from_case/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#remove_alert_from_case/4-options"},{"type":"function","title":"CaseManager.ICM.remove_alert_from_case!/4","doc":"Remove an alert related to the case.\nRaises any errors instead of returning them\n# Arguments\n* alert_id","ref":"CaseManager.ICM.html#remove_alert_from_case!/4"},{"type":"function","title":"Options - CaseManager.ICM.remove_alert_from_case!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#remove_alert_from_case!/4-options"},{"type":"function","title":"CaseManager.ICM.remove_enrichment/3","doc":"Calls the destroy action on CaseManager.ICM.Alert.Enrichment.","ref":"CaseManager.ICM.html#remove_enrichment/3"},{"type":"function","title":"Options - CaseManager.ICM.remove_enrichment/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#remove_enrichment/3-options"},{"type":"function","title":"CaseManager.ICM.remove_enrichment!/3","doc":"Calls the destroy action on CaseManager.ICM.Alert.Enrichment.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#remove_enrichment!/3"},{"type":"function","title":"Options - CaseManager.ICM.remove_enrichment!/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#remove_enrichment!/3-options"},{"type":"function","title":"CaseManager.ICM.search_alerts/3","doc":"Calls the search action on CaseManager.ICM.Alert.","ref":"CaseManager.ICM.html#search_alerts/3"},{"type":"function","title":"Options - CaseManager.ICM.search_alerts/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#search_alerts/3-options"},{"type":"function","title":"CaseManager.ICM.search_alerts!/3","doc":"Calls the search action on CaseManager.ICM.Alert.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#search_alerts!/3"},{"type":"function","title":"Options - CaseManager.ICM.search_alerts!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#search_alerts!/3-options"},{"type":"function","title":"CaseManager.ICM.search_cases/3","doc":"Search cases.","ref":"CaseManager.ICM.html#search_cases/3"},{"type":"function","title":"Options - CaseManager.ICM.search_cases/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#search_cases/3-options"},{"type":"function","title":"CaseManager.ICM.search_cases!/3","doc":"Search cases.\nRaises any errors instead of returning them","ref":"CaseManager.ICM.html#search_cases!/3"},{"type":"function","title":"Options - CaseManager.ICM.search_cases!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.ICM.html#search_cases!/3-options"},{"type":"function","title":"CaseManager.ICM.update_additional_data_on_alert/3","doc":"Change the additional related data to the alert.\n# Inputs\n* additional_data","ref":"CaseManager.ICM.html#update_additional_data_on_alert/3"},{"type":"function","title":"Options - CaseManager.ICM.update_additional_data_on_alert/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#update_additional_data_on_alert/3-options"},{"type":"function","title":"CaseManager.ICM.update_additional_data_on_alert!/3","doc":"Change the additional related data to the alert.\nRaises any errors instead of returning them\n# Inputs\n* additional_data","ref":"CaseManager.ICM.html#update_additional_data_on_alert!/3"},{"type":"function","title":"Options - CaseManager.ICM.update_additional_data_on_alert!/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#update_additional_data_on_alert!/3-options"},{"type":"function","title":"CaseManager.ICM.update_enrichment/3","doc":"Calls the update action on CaseManager.ICM.Alert.Enrichment.\n# Inputs\n* data\n* name\n* source\n* summary\n* alert_id","ref":"CaseManager.ICM.html#update_enrichment/3"},{"type":"function","title":"Options - CaseManager.ICM.update_enrichment/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#update_enrichment/3-options"},{"type":"function","title":"CaseManager.ICM.update_enrichment!/3","doc":"Calls the update action on CaseManager.ICM.Alert.Enrichment.\nRaises any errors instead of returning them\n# Inputs\n* data\n* name\n* source\n* summary\n* alert_id","ref":"CaseManager.ICM.html#update_enrichment!/3"},{"type":"function","title":"Options - CaseManager.ICM.update_enrichment!/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#update_enrichment!/3-options"},{"type":"function","title":"CaseManager.ICM.upload_file_to_case/4","doc":"Upload a file and relate it to the case.\n# Arguments\n* file","ref":"CaseManager.ICM.html#upload_file_to_case/4"},{"type":"function","title":"Options - CaseManager.ICM.upload_file_to_case/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#upload_file_to_case/4-options"},{"type":"function","title":"CaseManager.ICM.upload_file_to_case!/4","doc":"Upload a file and relate it to the case.\nRaises any errors instead of returning them\n# Arguments\n* file","ref":"CaseManager.ICM.html#upload_file_to_case!/4"},{"type":"function","title":"Options - CaseManager.ICM.upload_file_to_case!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#upload_file_to_case!/4-options"},{"type":"function","title":"CaseManager.ICM.view_case/4","doc":"Calls the view action on CaseManager.ICM.Case.\n# Arguments\n* time","ref":"CaseManager.ICM.html#view_case/4"},{"type":"function","title":"Options - CaseManager.ICM.view_case/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#view_case/4-options"},{"type":"function","title":"CaseManager.ICM.view_case!/4","doc":"Calls the view action on CaseManager.ICM.Case.\nRaises any errors instead of returning them\n# Arguments\n* time","ref":"CaseManager.ICM.html#view_case!/4"},{"type":"function","title":"Options - CaseManager.ICM.view_case!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.ICM.html#view_case!/4-options"},{"type":"module","title":"CaseManager.ICM.CaseAlert","doc":"Resource for the many-to-many relationship between cases and alerts.","ref":"CaseManager.ICM.CaseAlert.html"},{"type":"function","title":"CaseManager.ICM.CaseAlert.default_short_name/0","doc":"","ref":"CaseManager.ICM.CaseAlert.html#default_short_name/0"},{"type":"function","title":"CaseManager.ICM.CaseAlert.input/1","doc":"Validates that the keys in the provided input are valid for at least one action on the resource.\n\nRaises a KeyError error at compile time if not. This exists because generally a struct should only ever\nbe created by Ash as a result of a successful action. You should not be creating records manually in code,\ne.g `%MyResource{value: 1, value: 2}`. Generally that is fine, but often with embedded resources it is nice\nto be able to validate the keys that are being provided, e.g\n\n```elixir\nResource\n|> Ash.Changeset.for_create(:create, %{embedded: EmbeddedResource.input(foo: 1, bar: 2)})\n|> Ash.create()\n```","ref":"CaseManager.ICM.CaseAlert.html#input/1"},{"type":"function","title":"CaseManager.ICM.CaseAlert.input/2","doc":"Same as `input/1`, except restricts the keys to values accepted by the action provided.","ref":"CaseManager.ICM.CaseAlert.html#input/2"},{"type":"function","title":"CaseManager.ICM.CaseAlert.primary_key_matches?/2","doc":"","ref":"CaseManager.ICM.CaseAlert.html#primary_key_matches?/2"},{"type":"type","title":"CaseManager.ICM.CaseAlert.t/0","doc":"","ref":"CaseManager.ICM.CaseAlert.html#t:t/0"},{"type":"module","title":"CaseManager.ICM.CaseView","doc":"","ref":"CaseManager.ICM.CaseView.html"},{"type":"function","title":"CaseManager.ICM.CaseView.default_short_name/0","doc":"","ref":"CaseManager.ICM.CaseView.html#default_short_name/0"},{"type":"function","title":"CaseManager.ICM.CaseView.input/1","doc":"Validates that the keys in the provided input are valid for at least one action on the resource.\n\nRaises a KeyError error at compile time if not. This exists because generally a struct should only ever\nbe created by Ash as a result of a successful action. You should not be creating records manually in code,\ne.g `%MyResource{value: 1, value: 2}`. Generally that is fine, but often with embedded resources it is nice\nto be able to validate the keys that are being provided, e.g\n\n```elixir\nResource\n|> Ash.Changeset.for_create(:create, %{embedded: EmbeddedResource.input(foo: 1, bar: 2)})\n|> Ash.create()\n```","ref":"CaseManager.ICM.CaseView.html#input/1"},{"type":"function","title":"CaseManager.ICM.CaseView.input/2","doc":"Same as `input/1`, except restricts the keys to values accepted by the action provided.","ref":"CaseManager.ICM.CaseView.html#input/2"},{"type":"function","title":"CaseManager.ICM.CaseView.primary_key_matches?/2","doc":"","ref":"CaseManager.ICM.CaseView.html#primary_key_matches?/2"},{"type":"type","title":"CaseManager.ICM.CaseView.t/0","doc":"","ref":"CaseManager.ICM.CaseView.html#t:t/0"},{"type":"module","title":"CaseManager.Release","doc":"Used for executing DB release tasks when run in production without Mix\ninstalled.","ref":"CaseManager.Release.html"},{"type":"function","title":"CaseManager.Release.migrate/0","doc":"","ref":"CaseManager.Release.html#migrate/0"},{"type":"function","title":"CaseManager.Release.rollback/2","doc":"","ref":"CaseManager.Release.html#rollback/2"},{"type":"module","title":"CaseManager.Repo","doc":"","ref":"CaseManager.Repo.html"},{"type":"function","title":"CaseManager.Repo.aggregate/3","doc":"Callback implementation for  Ecto.Repo.aggregate/3 .","ref":"CaseManager.Repo.html#aggregate/3"},{"type":"function","title":"CaseManager.Repo.aggregate/4","doc":"Callback implementation for  Ecto.Repo.aggregate/4 .","ref":"CaseManager.Repo.html#aggregate/4"},{"type":"function","title":"CaseManager.Repo.all/2","doc":"Callback implementation for  Ecto.Repo.all/2 .","ref":"CaseManager.Repo.html#all/2"},{"type":"function","title":"CaseManager.Repo.all_tenants/0","doc":"Callback implementation for  AshPostgres.Repo.all_tenants/0 .","ref":"CaseManager.Repo.html#all_tenants/0"},{"type":"function","title":"CaseManager.Repo.checked_out?/0","doc":"Callback implementation for  Ecto.Repo.checked_out?/0 .","ref":"CaseManager.Repo.html#checked_out?/0"},{"type":"function","title":"CaseManager.Repo.checkout/2","doc":"Callback implementation for  Ecto.Repo.checkout/2 .","ref":"CaseManager.Repo.html#checkout/2"},{"type":"function","title":"CaseManager.Repo.child_spec/1","doc":"","ref":"CaseManager.Repo.html#child_spec/1"},{"type":"function","title":"CaseManager.Repo.config/0","doc":"Callback implementation for  Ecto.Repo.config/0 .","ref":"CaseManager.Repo.html#config/0"},{"type":"function","title":"CaseManager.Repo.create?/0","doc":"Callback implementation for  AshPostgres.Repo.create?/0 .","ref":"CaseManager.Repo.html#create?/0"},{"type":"function","title":"CaseManager.Repo.default_constraint_match_type/2","doc":"Callback implementation for  AshPostgres.Repo.default_constraint_match_type/2 .","ref":"CaseManager.Repo.html#default_constraint_match_type/2"},{"type":"function","title":"CaseManager.Repo.default_options/1","doc":"Callback implementation for  Ecto.Repo.default_options/1 .","ref":"CaseManager.Repo.html#default_options/1"},{"type":"function","title":"CaseManager.Repo.default_prefix/0","doc":"Callback implementation for  AshPostgres.Repo.default_prefix/0 .","ref":"CaseManager.Repo.html#default_prefix/0"},{"type":"function","title":"CaseManager.Repo.delete/2","doc":"Callback implementation for  Ecto.Repo.delete/2 .","ref":"CaseManager.Repo.html#delete/2"},{"type":"function","title":"CaseManager.Repo.delete!/2","doc":"Callback implementation for  Ecto.Repo.delete!/2 .","ref":"CaseManager.Repo.html#delete!/2"},{"type":"function","title":"CaseManager.Repo.delete_all/2","doc":"Callback implementation for  Ecto.Repo.delete_all/2 .","ref":"CaseManager.Repo.html#delete_all/2"},{"type":"function","title":"CaseManager.Repo.disable_atomic_actions?/0","doc":"Callback implementation for  AshPostgres.Repo.disable_atomic_actions?/0 .","ref":"CaseManager.Repo.html#disable_atomic_actions?/0"},{"type":"function","title":"CaseManager.Repo.disable_expr_error?/0","doc":"Callback implementation for  AshPostgres.Repo.disable_expr_error?/0 .","ref":"CaseManager.Repo.html#disable_expr_error?/0"},{"type":"function","title":"CaseManager.Repo.disconnect_all/2","doc":"A convenience function for SQL-based repositories that forces all connections in the\npool to disconnect within the given interval.\n\nSee `Ecto.Adapters.SQL.disconnect_all/3` for more information.","ref":"CaseManager.Repo.html#disconnect_all/2"},{"type":"function","title":"CaseManager.Repo.drop?/0","doc":"Callback implementation for  AshPostgres.Repo.drop?/0 .","ref":"CaseManager.Repo.html#drop?/0"},{"type":"function","title":"CaseManager.Repo.exists?/2","doc":"Callback implementation for  Ecto.Repo.exists?/2 .","ref":"CaseManager.Repo.html#exists?/2"},{"type":"function","title":"CaseManager.Repo.explain/3","doc":"A convenience function for SQL-based repositories that executes an EXPLAIN statement or similar\ndepending on the adapter to obtain statistics for the given query.\n\nSee `Ecto.Adapters.SQL.explain/4` for more information.","ref":"CaseManager.Repo.html#explain/3"},{"type":"function","title":"CaseManager.Repo.from_ecto/1","doc":"","ref":"CaseManager.Repo.html#from_ecto/1"},{"type":"function","title":"CaseManager.Repo.get/3","doc":"Callback implementation for  Ecto.Repo.get/3 .","ref":"CaseManager.Repo.html#get/3"},{"type":"function","title":"CaseManager.Repo.get!/3","doc":"Callback implementation for  Ecto.Repo.get!/3 .","ref":"CaseManager.Repo.html#get!/3"},{"type":"function","title":"CaseManager.Repo.get_by/3","doc":"Callback implementation for  Ecto.Repo.get_by/3 .","ref":"CaseManager.Repo.html#get_by/3"},{"type":"function","title":"CaseManager.Repo.get_by!/3","doc":"Callback implementation for  Ecto.Repo.get_by!/3 .","ref":"CaseManager.Repo.html#get_by!/3"},{"type":"function","title":"CaseManager.Repo.get_dynamic_repo/0","doc":"Callback implementation for  Ecto.Repo.get_dynamic_repo/0 .","ref":"CaseManager.Repo.html#get_dynamic_repo/0"},{"type":"function","title":"CaseManager.Repo.in_transaction?/0","doc":"Callback implementation for  Ecto.Repo.in_transaction?/0 .","ref":"CaseManager.Repo.html#in_transaction?/0"},{"type":"function","title":"CaseManager.Repo.init/2","doc":"Callback implementation for  Ecto.Repo.init/2 .","ref":"CaseManager.Repo.html#init/2"},{"type":"function","title":"CaseManager.Repo.insert/2","doc":"Callback implementation for  Ecto.Repo.insert/2 .","ref":"CaseManager.Repo.html#insert/2"},{"type":"function","title":"CaseManager.Repo.insert!/2","doc":"Callback implementation for  Ecto.Repo.insert!/2 .","ref":"CaseManager.Repo.html#insert!/2"},{"type":"function","title":"CaseManager.Repo.insert_all/3","doc":"Callback implementation for  Ecto.Repo.insert_all/3 .","ref":"CaseManager.Repo.html#insert_all/3"},{"type":"function","title":"CaseManager.Repo.insert_or_update/2","doc":"Callback implementation for  Ecto.Repo.insert_or_update/2 .","ref":"CaseManager.Repo.html#insert_or_update/2"},{"type":"function","title":"CaseManager.Repo.insert_or_update!/2","doc":"Callback implementation for  Ecto.Repo.insert_or_update!/2 .","ref":"CaseManager.Repo.html#insert_or_update!/2"},{"type":"function","title":"CaseManager.Repo.installed_extensions/0","doc":"Callback implementation for  AshPostgres.Repo.installed_extensions/0 .","ref":"CaseManager.Repo.html#installed_extensions/0"},{"type":"function","title":"CaseManager.Repo.load/2","doc":"Callback implementation for  Ecto.Repo.load/2 .","ref":"CaseManager.Repo.html#load/2"},{"type":"function","title":"CaseManager.Repo.migrations_path/0","doc":"Callback implementation for  AshPostgres.Repo.migrations_path/0 .","ref":"CaseManager.Repo.html#migrations_path/0"},{"type":"function","title":"CaseManager.Repo.min_pg_version/0","doc":"Callback implementation for  AshPostgres.Repo.min_pg_version/0 .","ref":"CaseManager.Repo.html#min_pg_version/0"},{"type":"function","title":"CaseManager.Repo.on_transaction_begin/1","doc":"Callback implementation for  AshPostgres.Repo.on_transaction_begin/1 .","ref":"CaseManager.Repo.html#on_transaction_begin/1"},{"type":"function","title":"CaseManager.Repo.one/2","doc":"Callback implementation for  Ecto.Repo.one/2 .","ref":"CaseManager.Repo.html#one/2"},{"type":"function","title":"CaseManager.Repo.one!/2","doc":"Callback implementation for  Ecto.Repo.one!/2 .","ref":"CaseManager.Repo.html#one!/2"},{"type":"function","title":"CaseManager.Repo.override_migration_type/1","doc":"Callback implementation for  AshPostgres.Repo.override_migration_type/1 .","ref":"CaseManager.Repo.html#override_migration_type/1"},{"type":"function","title":"CaseManager.Repo.prefer_transaction?/0","doc":"Callback implementation for  AshPostgres.Repo.prefer_transaction?/0 .","ref":"CaseManager.Repo.html#prefer_transaction?/0"},{"type":"function","title":"CaseManager.Repo.prefer_transaction_for_atomic_updates?/0","doc":"Callback implementation for  AshPostgres.Repo.prefer_transaction_for_atomic_updates?/0 .","ref":"CaseManager.Repo.html#prefer_transaction_for_atomic_updates?/0"},{"type":"function","title":"CaseManager.Repo.preload/3","doc":"Callback implementation for  Ecto.Repo.preload/3 .","ref":"CaseManager.Repo.html#preload/3"},{"type":"function","title":"CaseManager.Repo.prepare_query/3","doc":"Callback implementation for  Ecto.Repo.prepare_query/3 .","ref":"CaseManager.Repo.html#prepare_query/3"},{"type":"function","title":"CaseManager.Repo.put_dynamic_repo/1","doc":"Callback implementation for  Ecto.Repo.put_dynamic_repo/1 .","ref":"CaseManager.Repo.html#put_dynamic_repo/1"},{"type":"function","title":"CaseManager.Repo.query/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query/4` for more information.","ref":"CaseManager.Repo.html#query/3"},{"type":"function","title":"CaseManager.Repo.query!/3","doc":"A convenience function for SQL-based repositories that executes the given query.\n\nSee `Ecto.Adapters.SQL.query!/4` for more information.","ref":"CaseManager.Repo.html#query!/3"},{"type":"function","title":"CaseManager.Repo.query_many/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many/4` for more information.","ref":"CaseManager.Repo.html#query_many/3"},{"type":"function","title":"CaseManager.Repo.query_many!/3","doc":"A convenience function for SQL-based repositories that executes the given multi-result query.\n\nSee `Ecto.Adapters.SQL.query_many!/4` for more information.","ref":"CaseManager.Repo.html#query_many!/3"},{"type":"function","title":"CaseManager.Repo.reload/2","doc":"Callback implementation for  Ecto.Repo.reload/2 .","ref":"CaseManager.Repo.html#reload/2"},{"type":"function","title":"CaseManager.Repo.reload!/2","doc":"Callback implementation for  Ecto.Repo.reload!/2 .","ref":"CaseManager.Repo.html#reload!/2"},{"type":"function","title":"CaseManager.Repo.rollback/1","doc":"Callback implementation for  Ecto.Repo.rollback/1 .","ref":"CaseManager.Repo.html#rollback/1"},{"type":"function","title":"CaseManager.Repo.start_link/1","doc":"Callback implementation for  Ecto.Repo.start_link/1 .","ref":"CaseManager.Repo.html#start_link/1"},{"type":"function","title":"CaseManager.Repo.stop/1","doc":"Callback implementation for  Ecto.Repo.stop/1 .","ref":"CaseManager.Repo.html#stop/1"},{"type":"function","title":"CaseManager.Repo.stream/2","doc":"Callback implementation for  Ecto.Repo.stream/2 .","ref":"CaseManager.Repo.html#stream/2"},{"type":"function","title":"CaseManager.Repo.tenant_migrations_path/0","doc":"Callback implementation for  AshPostgres.Repo.tenant_migrations_path/0 .","ref":"CaseManager.Repo.html#tenant_migrations_path/0"},{"type":"function","title":"CaseManager.Repo.to_ecto/1","doc":"","ref":"CaseManager.Repo.html#to_ecto/1"},{"type":"function","title":"CaseManager.Repo.to_sql/2","doc":"A convenience function for SQL-based repositories that translates the given query to SQL.\n\nSee `Ecto.Adapters.SQL.to_sql/3` for more information.","ref":"CaseManager.Repo.html#to_sql/2"},{"type":"function","title":"CaseManager.Repo.transaction/2","doc":"Callback implementation for  Ecto.Repo.transaction/2 .","ref":"CaseManager.Repo.html#transaction/2"},{"type":"function","title":"CaseManager.Repo.transaction!/1","doc":"","ref":"CaseManager.Repo.html#transaction!/1"},{"type":"function","title":"CaseManager.Repo.update/2","doc":"Callback implementation for  Ecto.Repo.update/2 .","ref":"CaseManager.Repo.html#update/2"},{"type":"function","title":"CaseManager.Repo.update!/2","doc":"Callback implementation for  Ecto.Repo.update!/2 .","ref":"CaseManager.Repo.html#update!/2"},{"type":"function","title":"CaseManager.Repo.update_all/3","doc":"Callback implementation for  Ecto.Repo.update_all/3 .","ref":"CaseManager.Repo.html#update_all/3"},{"type":"module","title":"CaseManager.SelectedAlerts","doc":"GenServer that holds the state of which alerts a user has selected. This is only meant\nto store data for the mssp users.","ref":"CaseManager.SelectedAlerts.html"},{"type":"function","title":"CaseManager.SelectedAlerts.child_spec/1","doc":"Returns a specification to start this module under a supervisor.\n\nSee `Supervisor`.","ref":"CaseManager.SelectedAlerts.html#child_spec/1"},{"type":"function","title":"CaseManager.SelectedAlerts.drop_selected_alerts/1","doc":"Drops the selected alerts for a given user.","ref":"CaseManager.SelectedAlerts.html#drop_selected_alerts/1"},{"type":"function","title":"CaseManager.SelectedAlerts.get_selected_alerts/1","doc":"Retrieves the selected alerts for a given user.","ref":"CaseManager.SelectedAlerts.html#get_selected_alerts/1"},{"type":"function","title":"CaseManager.SelectedAlerts.start_link/1","doc":"","ref":"CaseManager.SelectedAlerts.html#start_link/1"},{"type":"function","title":"CaseManager.SelectedAlerts.toggle_alert_selection/3","doc":"Toggles the selection state of an alert for a given user.","ref":"CaseManager.SelectedAlerts.html#toggle_alert_selection/3"},{"type":"module","title":"CaseManager.Teams","doc":"Domain that reprensents teams and their related resources.\n\n\nResources related to a team.","ref":"CaseManager.Teams.html"},{"type":"function","title":"CaseManager.Teams.add_alert_to_team/4","doc":"Add an alert to a team.\n# Arguments\n* alert","ref":"CaseManager.Teams.html#add_alert_to_team/4"},{"type":"function","title":"Options - CaseManager.Teams.add_alert_to_team/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_alert_to_team/4-options"},{"type":"function","title":"CaseManager.Teams.add_alert_to_team!/4","doc":"Add an alert to a team.\nRaises any errors instead of returning them\n# Arguments\n* alert","ref":"CaseManager.Teams.html#add_alert_to_team!/4"},{"type":"function","title":"Options - CaseManager.Teams.add_alert_to_team!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_alert_to_team!/4-options"},{"type":"function","title":"CaseManager.Teams.add_case_to_team/4","doc":"Add a case to a team.\n# Arguments\n* case","ref":"CaseManager.Teams.html#add_case_to_team/4"},{"type":"function","title":"Options - CaseManager.Teams.add_case_to_team/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_case_to_team/4-options"},{"type":"function","title":"CaseManager.Teams.add_case_to_team!/4","doc":"Add a case to a team.\nRaises any errors instead of returning them\n# Arguments\n* case","ref":"CaseManager.Teams.html#add_case_to_team!/4"},{"type":"function","title":"Options - CaseManager.Teams.add_case_to_team!/4","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_case_to_team!/4-options"},{"type":"function","title":"CaseManager.Teams.add_team/2","doc":"Add a team.\n# Inputs\n* name\n* type\n* ip\n* email\n* phone","ref":"CaseManager.Teams.html#add_team/2"},{"type":"function","title":"Options - CaseManager.Teams.add_team/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_team/2-options"},{"type":"function","title":"CaseManager.Teams.add_team!/2","doc":"Add a team.\nRaises any errors instead of returning them\n# Inputs\n* name\n* type\n* ip\n* email\n* phone","ref":"CaseManager.Teams.html#add_team!/2"},{"type":"function","title":"Options - CaseManager.Teams.add_team!/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#add_team!/2-options"},{"type":"function","title":"CaseManager.Teams.can_add_alert_to_team/5","doc":"Runs authorization checks for `CaseManager.Teams.Team.add_alert`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_add_alert_to_team/5"},{"type":"function","title":"Options - CaseManager.Teams.can_add_alert_to_team/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_alert_to_team/5-options"},{"type":"function","title":"CaseManager.Teams.can_add_alert_to_team?/5","doc":"Runs authorization checks for `CaseManager.Teams.Team.add_alert`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_add_alert_to_team?/5"},{"type":"function","title":"Options - CaseManager.Teams.can_add_alert_to_team?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_alert_to_team?/5-options"},{"type":"function","title":"CaseManager.Teams.can_add_case_to_team/5","doc":"Runs authorization checks for `CaseManager.Teams.Team.add_case`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_add_case_to_team/5"},{"type":"function","title":"Options - CaseManager.Teams.can_add_case_to_team/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_case_to_team/5-options"},{"type":"function","title":"CaseManager.Teams.can_add_case_to_team?/5","doc":"Runs authorization checks for `CaseManager.Teams.Team.add_case`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_add_case_to_team?/5"},{"type":"function","title":"Options - CaseManager.Teams.can_add_case_to_team?/5","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_case_to_team?/5-options"},{"type":"function","title":"CaseManager.Teams.can_add_team/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.create`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_add_team/3"},{"type":"function","title":"Options - CaseManager.Teams.can_add_team/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_team/3-options"},{"type":"function","title":"CaseManager.Teams.can_add_team?/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.create`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_add_team?/3"},{"type":"function","title":"Options - CaseManager.Teams.can_add_team?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_add_team?/3-options"},{"type":"function","title":"CaseManager.Teams.can_delete_team_by_id/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.destroy`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_delete_team_by_id/4"},{"type":"function","title":"Options - CaseManager.Teams.can_delete_team_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_delete_team_by_id/4-options"},{"type":"function","title":"CaseManager.Teams.can_delete_team_by_id?/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.destroy`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_delete_team_by_id?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_delete_team_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_delete_team_by_id?/4-options"},{"type":"function","title":"CaseManager.Teams.can_delete_user_by_id/4","doc":"Runs authorization checks for `CaseManager.Teams.User.destroy`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_delete_user_by_id/4"},{"type":"function","title":"Options - CaseManager.Teams.can_delete_user_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_delete_user_by_id/4-options"},{"type":"function","title":"CaseManager.Teams.can_delete_user_by_id?/4","doc":"Runs authorization checks for `CaseManager.Teams.User.destroy`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_delete_user_by_id?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_delete_user_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_delete_user_by_id?/4-options"},{"type":"function","title":"CaseManager.Teams.can_edit_user/4","doc":"Runs authorization checks for `CaseManager.Teams.User.update`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_edit_user/4"},{"type":"function","title":"Options - CaseManager.Teams.can_edit_user/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_edit_user/4-options"},{"type":"function","title":"CaseManager.Teams.can_edit_user?/4","doc":"Runs authorization checks for `CaseManager.Teams.User.update`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_edit_user?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_edit_user?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_edit_user?/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_archived_user_by_id/4","doc":"Runs authorization checks for `CaseManager.Teams.ArchivedUser.archived`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_get_archived_user_by_id/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_archived_user_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_archived_user_by_id/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_archived_user_by_id?/4","doc":"Runs authorization checks for `CaseManager.Teams.ArchivedUser.archived`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_get_archived_user_by_id?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_archived_user_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_archived_user_by_id?/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_team_by_id/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.read`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_get_team_by_id/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_team_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_team_by_id/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_team_by_id?/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.read`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_get_team_by_id?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_team_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_team_by_id?/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_user_by_id/4","doc":"Runs authorization checks for `CaseManager.Teams.User.read_paged`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_get_user_by_id/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_user_by_id/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_user_by_id/4-options"},{"type":"function","title":"CaseManager.Teams.can_get_user_by_id?/4","doc":"Runs authorization checks for `CaseManager.Teams.User.read_paged`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_get_user_by_id?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_get_user_by_id?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_get_user_by_id?/4-options"},{"type":"function","title":"CaseManager.Teams.can_list_teams/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.read`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_list_teams/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_teams/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_teams/3-options"},{"type":"function","title":"CaseManager.Teams.can_list_teams?/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.read`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_list_teams?/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_teams?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_teams?/3-options"},{"type":"function","title":"CaseManager.Teams.can_list_teams_paged/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.read_paged`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_list_teams_paged/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_teams_paged/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_teams_paged/3-options"},{"type":"function","title":"CaseManager.Teams.can_list_teams_paged?/3","doc":"Runs authorization checks for `CaseManager.Teams.Team.read_paged`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_list_teams_paged?/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_teams_paged?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_teams_paged?/3-options"},{"type":"function","title":"CaseManager.Teams.can_list_users/3","doc":"Runs authorization checks for `CaseManager.Teams.User.read_paged`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_list_users/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_users/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_users/3-options"},{"type":"function","title":"CaseManager.Teams.can_list_users?/3","doc":"Runs authorization checks for `CaseManager.Teams.User.read_paged`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_list_users?/3"},{"type":"function","title":"Options - CaseManager.Teams.can_list_users?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_list_users?/3-options"},{"type":"function","title":"CaseManager.Teams.can_register_user/3","doc":"Runs authorization checks for `CaseManager.Teams.User.register_with_password`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_register_user/3"},{"type":"function","title":"Options - CaseManager.Teams.can_register_user/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_register_user/3-options"},{"type":"function","title":"CaseManager.Teams.can_register_user?/3","doc":"Runs authorization checks for `CaseManager.Teams.User.register_with_password`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_register_user?/3"},{"type":"function","title":"Options - CaseManager.Teams.can_register_user?/3","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_register_user?/3-options"},{"type":"function","title":"CaseManager.Teams.can_search_teams/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.search`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_search_teams/4"},{"type":"function","title":"Options - CaseManager.Teams.can_search_teams/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_search_teams/4-options"},{"type":"function","title":"CaseManager.Teams.can_search_teams?/4","doc":"Runs authorization checks for `CaseManager.Teams.Team.search`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_search_teams?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_search_teams?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_search_teams?/4-options"},{"type":"function","title":"CaseManager.Teams.can_search_users/4","doc":"Runs authorization checks for `CaseManager.Teams.User.search`\nSee `Ash.can/3` for more information","ref":"CaseManager.Teams.html#can_search_users/4"},{"type":"function","title":"Options - CaseManager.Teams.can_search_users/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `:maybe`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_search_users/4-options"},{"type":"function","title":"CaseManager.Teams.can_search_users?/4","doc":"Runs authorization checks for `CaseManager.Teams.User.search`, returning a boolean.\nSee `Ash.can?/3` for more information","ref":"CaseManager.Teams.html#can_search_users?/4"},{"type":"function","title":"Options - CaseManager.Teams.can_search_users?/4","doc":"* `:maybe_is` (`t:term/0`) - If the actor *may* be able to perform the action, what value should be returned. The default value is `true`.\n* `:filter_with` - If set to `:error`, the query will raise an error on a match. If set to `:filter` the query will filter out unauthorized access. Valid values are :filter, :error The default value is `:filter`.\n* `:validate?` (`t:boolean/0`) - Whether or not to treat an invalid action as a non-allowed action. The default value is `false`.\n* `:reuse_values?` (`t:boolean/0`) - Whether or not loaded data like aggregates, calculations and relationships should be checked in memory if possible, instead of querying. No effect if `pre_flight?` is `false`. The default value is `false`.\n* `:pre_flight?` (`t:boolean/0`) - Whether or not this is a pre_flight check (which may perform optimized in-memory checks) or the final proper check. The default value is `true`.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol. Will overwrite any actor, tenant or context provided. See `Ash.Context` for more.\n* `:run_queries?` (`t:boolean/0`) - Whether or not to run queries. If set to `true`, `:maybe` will not be returned. The default value is `true`.\n* `:data` - The record or records specifically attempting to be acted upon.\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - The tenant to use for authorization\n* `:alter_source?` (`t:boolean/0`) - If set to `true`, the source being authorized is returned so it can be run. The default value is `false`.\n* `:base_query` (`t:term/0`) - A base query on which to apply an generated filters\n* `:no_check?` (`t:boolean/0`) - Whether or not authorization must pass at the strict/filter step, or if post-checks are allowed to be run The default value is `false`.\n* `:on_must_pass_strict_check` (`t:term/0`) - Override the value returned when `no_check?` is `true` but a check must be run.\n* `:atomic_changeset` (`t:term/0`) - A base query on which to apply an generated filters\n* `:return_forbidden_error?` (`t:boolean/0`) - Whether or not to return a forbidden error in cases of not being authorized. The default value is `false`.","ref":"CaseManager.Teams.html#can_search_users?/4-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_add_alert_to_team/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_add_alert_to_team/4"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_add_alert_to_team/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.Teams.html#changeset_to_add_alert_to_team/4-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_add_case_to_team/4","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_add_case_to_team/4"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_add_case_to_team/4","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.Teams.html#changeset_to_add_case_to_team/4-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_add_team/2","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_add_team/2"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_add_team/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.","ref":"CaseManager.Teams.html#changeset_to_add_team/2-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_delete_team_by_id/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_delete_team_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_delete_team_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.Teams.html#changeset_to_delete_team_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_delete_user_by_id/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_delete_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_delete_user_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.Teams.html#changeset_to_delete_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_edit_user/3","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_edit_user/3"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_edit_user/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.","ref":"CaseManager.Teams.html#changeset_to_edit_user/3-options"},{"type":"function","title":"CaseManager.Teams.changeset_to_register_user/2","doc":"Returns the changeset corresponding to the action.","ref":"CaseManager.Teams.html#changeset_to_register_user/2"},{"type":"function","title":"Options - CaseManager.Teams.changeset_to_register_user/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.","ref":"CaseManager.Teams.html#changeset_to_register_user/2-options"},{"type":"function","title":"CaseManager.Teams.default_short_name/0","doc":"","ref":"CaseManager.Teams.html#default_short_name/0"},{"type":"function","title":"CaseManager.Teams.delete_team_by_id/3","doc":"Calls the destroy action on CaseManager.Teams.Team.","ref":"CaseManager.Teams.html#delete_team_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.delete_team_by_id/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#delete_team_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.delete_team_by_id!/3","doc":"Calls the destroy action on CaseManager.Teams.Team.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#delete_team_by_id!/3"},{"type":"function","title":"Options - CaseManager.Teams.delete_team_by_id!/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#delete_team_by_id!/3-options"},{"type":"function","title":"CaseManager.Teams.delete_user_by_id/3","doc":"Calls the destroy action on CaseManager.Teams.User.","ref":"CaseManager.Teams.html#delete_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.delete_user_by_id/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#delete_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.delete_user_by_id!/3","doc":"Calls the destroy action on CaseManager.Teams.User.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#delete_user_by_id!/3"},{"type":"function","title":"Options - CaseManager.Teams.delete_user_by_id!/3","doc":"* `:return_destroyed?` (`t:boolean/0`) - If true, the destroyed record is included in the return result, e.g `{:ok, destroyed}` or `{:ok, destroyed, notifications}` The default value is `false`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_destroy`, if a query, list, or stream of inputs is provided.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `:atomic`.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#delete_user_by_id!/3-options"},{"type":"function","title":"CaseManager.Teams.edit_user/3","doc":"Update the information on a user.\n# Inputs\n* password\n* role\n* first_name\n* last_name\n* email\n* team_id\n* password_confirmation","ref":"CaseManager.Teams.html#edit_user/3"},{"type":"function","title":"Options - CaseManager.Teams.edit_user/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#edit_user/3-options"},{"type":"function","title":"CaseManager.Teams.edit_user!/3","doc":"Update the information on a user.\nRaises any errors instead of returning them\n# Inputs\n* password\n* role\n* first_name\n* last_name\n* email\n* team_id\n* password_confirmation","ref":"CaseManager.Teams.html#edit_user!/3"},{"type":"function","title":"Options - CaseManager.Teams.edit_user!/3","doc":"* `:params` (`t:map/0`) - Parameters to supply, ignored if the input is a changeset, only used when an identifier is given.\n* `:atomic_upgrade?` (`t:boolean/0`) - If true the action will be done atomically if it can (and is configured to do so), ignoring the in memory transformations and validations. You should not generally need to disable this. The default value is `true`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_update`, if a query, list, or stream of inputs is provided.\n  * `:atomic_update` (`t:map/0`) - A map of atomic updates to apply. See `Ash.Changeset.atomic_update/3` for more.\n  * `:stream_batch_size` (`t:integer/0`) - Batch size to use if provided a query and the query must be streamed\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records if the `:stream` strategy is chosen. See the `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:authorize_query?` (`t:boolean/0`) - If a query is given, determines whether or not authorization is run on that query. The default value is `true`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:filter` (`t:term/0`) - A filter to apply to records. This is also applied to a stream of inputs.\n  * `:strategy` - The strategy or strategies to enable. :stream is used in all cases if the data layer does not support atomics. The default value is `[:atomic]`.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n  * `:lock` (`t:term/0`) - A lock statement to add onto the query\n  * `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.\n    The query goes through many potential changes during a request, potentially adding\n    authorization filters, or replacing relationships for other data layers with their\n    corresponding ids. This option can be used to get the true query that was sent to\n    the data layer.\n    The default value is `false`.\n  * `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n  * `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n      a list of fields to fetch on a relationship, which allows for more\n      optimized data-fetching.\n      See `Ash.Query.load/2`.\n    The default value is `false`.\n  * `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. The default value is `:filter`.\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#edit_user!/3-options"},{"type":"function","title":"CaseManager.Teams.form_to_add_alert_to_team/2","doc":"Add an alert to a team.","ref":"CaseManager.Teams.html#form_to_add_alert_to_team/2"},{"type":"function","title":"Options - CaseManager.Teams.form_to_add_alert_to_team/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_add_alert_to_team/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_add_alert_to_team/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_add_alert_to_team/2-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_add_case_to_team/2","doc":"Add a case to a team.","ref":"CaseManager.Teams.html#form_to_add_case_to_team/2"},{"type":"function","title":"Options - CaseManager.Teams.form_to_add_case_to_team/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_add_case_to_team/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_add_case_to_team/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_add_case_to_team/2-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_add_team/1","doc":"Add a team.","ref":"CaseManager.Teams.html#form_to_add_team/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_add_team/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_add_team/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_add_team/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_add_team/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_delete_team_by_id/1","doc":"Creates a form for the destroy action on CaseManager.Teams.Team.","ref":"CaseManager.Teams.html#form_to_delete_team_by_id/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_delete_team_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_delete_team_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_delete_team_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_delete_team_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_delete_user_by_id/1","doc":"Creates a form for the destroy action on CaseManager.Teams.User.","ref":"CaseManager.Teams.html#form_to_delete_user_by_id/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_delete_user_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_delete_user_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_delete_user_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_delete_user_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_edit_user/2","doc":"Update the information on a user.","ref":"CaseManager.Teams.html#form_to_edit_user/2"},{"type":"function","title":"Options - CaseManager.Teams.form_to_edit_user/2","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_edit_user/2-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_edit_user/2","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_edit_user/2-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_get_archived_user_by_id/1","doc":"List all archived users.","ref":"CaseManager.Teams.html#form_to_get_archived_user_by_id/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_get_archived_user_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_get_archived_user_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_get_archived_user_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_get_archived_user_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_get_team_by_id/1","doc":"List all teams by name in acending order.","ref":"CaseManager.Teams.html#form_to_get_team_by_id/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_get_team_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_get_team_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_get_team_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_get_team_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_get_user_by_id/1","doc":"List all users paginated by name","ref":"CaseManager.Teams.html#form_to_get_user_by_id/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_get_user_by_id/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_get_user_by_id/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_get_user_by_id/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_get_user_by_id/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_list_teams/1","doc":"List all teams by name in acending order.","ref":"CaseManager.Teams.html#form_to_list_teams/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_list_teams/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_list_teams/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_list_teams/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_list_teams/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_list_teams_paged/1","doc":"List all teams by name in acending order paginated.","ref":"CaseManager.Teams.html#form_to_list_teams_paged/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_list_teams_paged/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_list_teams_paged/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_list_teams_paged/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_list_teams_paged/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_list_users/1","doc":"List all users paginated by name","ref":"CaseManager.Teams.html#form_to_list_users/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_list_users/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_list_users/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_list_users/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_list_users/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_register_user/1","doc":"Register a new user with a username and password.","ref":"CaseManager.Teams.html#form_to_register_user/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_register_user/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_register_user/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_register_user/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_register_user/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_search_teams/1","doc":"Creates a form for the search action on CaseManager.Teams.Team.","ref":"CaseManager.Teams.html#form_to_search_teams/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_search_teams/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_search_teams/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_search_teams/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_search_teams/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.form_to_search_users/1","doc":"Creates a form for the search action on CaseManager.Teams.User.","ref":"CaseManager.Teams.html#form_to_search_users/1"},{"type":"function","title":"Options - CaseManager.Teams.form_to_search_users/1","doc":"* `:actor` (`t:term/0`) - The actor performing the action. Passed through to the underlying action.\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope` for more.\n* `:forms` (`t:keyword/0`) - Nested form configurations. See `for_create/3` \"Nested Form Options\" docs for more.\n* `:warn_on_unhandled_errors?` (`t:boolean/0`) - Warns on any errors that don't match the form pattern of `{:field, \"message\", [replacement: :vars]}` or implement the `AshPhoenix.FormData.Error` protocol. The default value is `true`.\n* `:domain` (`t:atom/0`) - The domain to use when calling the action.\n* `:as` (`t:String.t/0`) - The name of the form in the submitted params. You will need to pull the form params out using this key. The default value is `\"form\"`.\n* `:id` (`t:String.t/0`) - The html id of the form. Defaults to the value of `:as` if provided, otherwise \"form\"\n* `:transform_errors` - Allows for manual manipulation and transformation of errors.  \n  If possible, try to implement `AshPhoenix.FormData.Error` for the error (if it as a custom one, for example).\n  If that isn't possible, you can provide this function which will get the changeset and the error, and should\n  return a list of ash phoenix formatted errors, e.g `[{field :: atom, message :: String.t(), substituations :: Keyword.t()}]`  \n  Example:  \n  AshPhoenix.Form.for_create(..., transform_errors: fn\n    %{field: :field1} = error ->\n      %{error | field: :field2}  \n    error ->\n      error\n  end\n* `:prepare_source` - A 1-argument function the receives the initial changeset (or query) and makes any relevant changes to it.\n  This can be used to do things like:  \n  * Set default argument values before the validations are run using `Ash.Changeset.set_arguments/2` or `Ash.Changeset.set_argument/3`\n  * Set changeset context\n  * Do any other pre-processing on the changeset\n* `:prepare_params` - A 2-argument function that receives the params map and the :validate atom and should return prepared params.\n  Called before the form is validated.\n* `:transform_params` - A function for post-processing the form parameters before they are used for changeset validation/submission.\n  Use a 3-argument function to pattern match on the `AshPhoenix.Form` struct.\n* `:method` (`t:String.t/0`) - The http method to associate with the form. Defaults to `post` for creates, and `put` for everything else.\n* `:exclude_fields_if_empty` - These fields will be ignored if they are empty strings.  \n  This list of fields supports dead view forms. When a form is submitted from dead view\n  empty fields are submitted as empty strings. This is problematic for fields that allow_nil\n  or those that have default values.\n* `:tenant` (`t:term/0`) - The current tenant. Passed through to the underlying action.\n* `:params` (`t:term/0`) - The initial parameters to use for the form. This is useful for setting up a form with default values. The default value is `%{}`.\nAny *additional* options will be passed to the underlying call to build the source, i.e\n`Ash.ActionInput.for_action/4`, or `Ash.Changeset.for_*`. This means you can set things\nlike the tenant/actor. These will be retained, and provided again when \n`Form.submit/3` is called.","ref":"CaseManager.Teams.html#form_to_search_users/1-options"},{"type":"function","title":"Nested Form Options - CaseManager.Teams.form_to_search_users/1","doc":"* `:type` - The cardinality of the nested form - `:list` or `:single`. Valid values are :list, :single The default value is `:single`.\n* `:sparse?` (`t:boolean/0`) - If the nested form is `sparse`, the form won't expect all inputs for all forms to be present.  \n  Has no effect if the type is `:single`.  \n  Normally, if you leave some forms out of a list of nested forms, they are removed from the parameters\n  passed to the action. For example, if you had a `post` with two comments `[%Comment{id: 1}, %Comment{id: 2}]`\n  and you passed down params like `comments[0][id]=1&comments[1][text]=new_text`, we would remove the second comment\n  from the input parameters, resulting in the following being passed into the action: `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}]}`.\n  By setting it to sparse, you have to explicitly use `remove_form` for that removal to happen. So in the same scenario above, the parameters\n  that would be sent would actually be `%{\"comments\" => [%{\"id\" => 1, \"text\" => \"new\"}, %{\"id\" => 2}]}`.  \n  One major difference with `sparse?` is that the form actually ignores the *index* provided, e.g `comments[0]...`, and instead uses the primary\n  key e.g `comments[0][id]` to match which form is being updated. This prevents you from having to find the index of the specific item you want to\n  update. Which could be very gnarly on deeply nested forms. If there is no primary key, or the primary key does not match anything, it is treated\n  as a new form.  \n  REMEMBER: You need to use `Phoenix.Components.inputs_for` to render the nested forms, or manually add hidden inputs using\n  `hidden_inputs_for` (or `HiddenInputs` if using Surface) for the id to be automatically placed into the form.\n* `:forms` (`t:keyword/0`) - Forms nested inside the current nesting level in all cases.\n* `:for_type` - What action types the form applies for. Leave blank for it to apply to all action types. Valid values are :read, :create, :update\n* `:merge?` (`t:boolean/0`) - When building parameters, this input will be merged with its parent input. This allows for combining multiple forms into a single input. The default value is `false`.\n* `:for` (`t:atom/0`) - When creating parameters for the action, the key that the forms should be gathered into. Defaults to the key used to configure the nested form. Ignored if `merge?` is `true`.\n* `:resource` (`t:atom/0`) - The resource of the nested forms. Unnecessary if you are providing the `data` key, and not adding additional forms to this path.\n* `:create_action` (`t:atom/0`) - The create action to use when building new forms. Only necessary if you want to use `add_form/3` with this path.\n* `:update_action` (`t:atom/0`) - The update action to use when building forms for data. Only necessary if you supply the `data` key.\n* `:data` (`t:term/0`) - The current value or values that should have update forms built by default.  \n  You can also provide a single argument function that will return the data based on the\n  data of the parent form. This is important for multiple nesting levels of `:list` type\n  forms, because the data depends on which parent is being rendered.","ref":"CaseManager.Teams.html#form_to_search_users/1-nested-form-options"},{"type":"function","title":"CaseManager.Teams.get_archived_user_by_id/3","doc":"List all archived users.","ref":"CaseManager.Teams.html#get_archived_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.get_archived_user_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_archived_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.get_archived_user_by_id!/3","doc":"List all archived users.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#get_archived_user_by_id!/3"},{"type":"function","title":"Options - CaseManager.Teams.get_archived_user_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_archived_user_by_id!/3-options"},{"type":"function","title":"CaseManager.Teams.get_team_by_id/3","doc":"List all teams by name in acending order.","ref":"CaseManager.Teams.html#get_team_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.get_team_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_team_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.get_team_by_id!/3","doc":"List all teams by name in acending order.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#get_team_by_id!/3"},{"type":"function","title":"Options - CaseManager.Teams.get_team_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_team_by_id!/3-options"},{"type":"function","title":"CaseManager.Teams.get_user_by_id/3","doc":"List all users paginated by name","ref":"CaseManager.Teams.html#get_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.get_user_by_id/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.get_user_by_id!/3","doc":"List all users paginated by name\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#get_user_by_id!/3"},{"type":"function","title":"Options - CaseManager.Teams.get_user_by_id!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#get_user_by_id!/3-options"},{"type":"function","title":"CaseManager.Teams.json_api_match_route/2","doc":"","ref":"CaseManager.Teams.html#json_api_match_route/2"},{"type":"function","title":"CaseManager.Teams.list_teams/2","doc":"List all teams by name in acending order.","ref":"CaseManager.Teams.html#list_teams/2"},{"type":"function","title":"Options - CaseManager.Teams.list_teams/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_teams/2-options"},{"type":"function","title":"CaseManager.Teams.list_teams!/2","doc":"List all teams by name in acending order.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#list_teams!/2"},{"type":"function","title":"Options - CaseManager.Teams.list_teams!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_teams!/2-options"},{"type":"function","title":"CaseManager.Teams.list_teams_paged/2","doc":"List all teams by name in acending order paginated.","ref":"CaseManager.Teams.html#list_teams_paged/2"},{"type":"function","title":"Options - CaseManager.Teams.list_teams_paged/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_teams_paged/2-options"},{"type":"function","title":"CaseManager.Teams.list_teams_paged!/2","doc":"List all teams by name in acending order paginated.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#list_teams_paged!/2"},{"type":"function","title":"Options - CaseManager.Teams.list_teams_paged!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_teams_paged!/2-options"},{"type":"function","title":"CaseManager.Teams.list_users/2","doc":"List all users paginated by name","ref":"CaseManager.Teams.html#list_users/2"},{"type":"function","title":"Options - CaseManager.Teams.list_users/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_users/2-options"},{"type":"function","title":"CaseManager.Teams.list_users!/2","doc":"List all users paginated by name\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#list_users!/2"},{"type":"function","title":"Options - CaseManager.Teams.list_users!/2","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#list_users!/2-options"},{"type":"function","title":"CaseManager.Teams.query_to_get_archived_user_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_get_archived_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.query_to_get_archived_user_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_get_archived_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.query_to_get_team_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_get_team_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.query_to_get_team_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_get_team_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.query_to_get_user_by_id/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_get_user_by_id/3"},{"type":"function","title":"Options - CaseManager.Teams.query_to_get_user_by_id/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_get_user_by_id/3-options"},{"type":"function","title":"CaseManager.Teams.query_to_list_teams/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_list_teams/2"},{"type":"function","title":"Options - CaseManager.Teams.query_to_list_teams/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_list_teams/2-options"},{"type":"function","title":"CaseManager.Teams.query_to_list_teams_paged/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_list_teams_paged/2"},{"type":"function","title":"Options - CaseManager.Teams.query_to_list_teams_paged/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_list_teams_paged/2-options"},{"type":"function","title":"CaseManager.Teams.query_to_list_users/2","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_list_users/2"},{"type":"function","title":"Options - CaseManager.Teams.query_to_list_users/2","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_list_users/2-options"},{"type":"function","title":"CaseManager.Teams.query_to_search_teams/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_search_teams/3"},{"type":"function","title":"Options - CaseManager.Teams.query_to_search_teams/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_search_teams/3-options"},{"type":"function","title":"CaseManager.Teams.query_to_search_users/3","doc":"Returns the query corresponding to the action.","ref":"CaseManager.Teams.html#query_to_search_users/3"},{"type":"function","title":"Options - CaseManager.Teams.query_to_search_users/3","doc":"* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.","ref":"CaseManager.Teams.html#query_to_search_users/3-options"},{"type":"function","title":"CaseManager.Teams.register_user/2","doc":"Register a new user with a username and password.\n# Inputs\n* password - The proposed password for the user, in plain text.\n* role\n* first_name\n* last_name\n* email\n* team_id\n* password_confirmation - The proposed password for the user (again), in plain text.","ref":"CaseManager.Teams.html#register_user/2"},{"type":"function","title":"Options - CaseManager.Teams.register_user/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#register_user/2-options"},{"type":"function","title":"CaseManager.Teams.register_user!/2","doc":"Register a new user with a username and password.\nRaises any errors instead of returning them\n# Inputs\n* password - The proposed password for the user, in plain text.\n* role\n* first_name\n* last_name\n* email\n* team_id\n* password_confirmation - The proposed password for the user (again), in plain text.","ref":"CaseManager.Teams.html#register_user!/2"},{"type":"function","title":"Options - CaseManager.Teams.register_user!/2","doc":"* `:upsert?` (`t:boolean/0`) - If a conflict is found based on the primary key, the record is updated in the database (requires upsert support) The default value is `false`.\n* `:return_skipped_upsert?` (`t:boolean/0`) - If `true`, and a record was *not* upserted because its filter prevented the upsert, the original record (which was *not* upserted) will be returned. The default value is `false`.\n* `:upsert_identity` (`t:atom/0`) - The identity to use when detecting conflicts for `upsert?`, e.g. `upsert_identity: :full_name`. By default, the primary key is used. Has no effect if `upsert?: true` is not provided\n* `:upsert_fields` - The fields to upsert. If not set, the action's upsert_fields is used, and if that is not set, then any fields not being set to defaults are written.\n* `:upsert_condition` (`t:term/0`) - An expression to check if the record should be updated when there's a conflict.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:return_notifications?` (`t:boolean/0`) - Use this if you're running ash actions in your own transaction and you want to manually handle sending notifications.  \n  If a transaction is ongoing, and this is false, notifications will be discarded, otherwise\n  the return value is `{:ok, result, notifications}` (or `{:ok, notifications}`)  \n  To send notifications later, use `Ash.Notifier.notify(notifications)`. It sends any notifications\n  that can be sent, and returns the rest. The default value is `false`.\n* `:rollback_on_error?` (`t:boolean/0`) - Whether or not to rollback the transaction on error, if the resource is in a transaction.  \n  If the action has `transaction? false` this option has no effect. If an error is returned from the\n  data layer and the resource is in a transaction, the transaction is always rolled back, regardless. The default value is `true`.\n* `:notification_metadata` (`t:term/0`) - Metadata to be merged into the metadata field for all notifications sent from this operation. The default value is `%{}`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:load` (`t:term/0`) - A load statement to add onto the changeset\n* `:changeset` (`t:term/0`) - A changeset to seed the action with.\n* `:bulk_options` (`t:keyword/0`) - Options passed to `Ash.bulk_create`, if a list or stream of inputs is provided.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:after_action` (function of arity 2) - An after_action hook to be added to each processed changeset\n  * `:read_action` (`t:atom/0`) - The action to use when building the read query.\n  * `:assume_casted?` (`t:boolean/0`) - Whether or not to cast attributes and arguments as input. This is an optimization for cases where the input is already casted and/or not in need of casting The default value is `false`.\n  * `:select` (list of `t:atom/0`) - A select statement to apply to records. Ignored if `return_records?` is not true.\n  * `:authorize_query_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_changeset_with` - If set to `:error`, instead of filtering unauthorized changes, unauthorized changes will raise an appropriate forbidden error. Uses `authorize_with` if not set.\n  * `:authorize_with` - If set to `:error`, instead of filtering unauthorized query results, unauthorized query results will raise an appropriate forbidden error. The default value is `:filter`.\n  * `:sorted?` (`t:boolean/0`) - Whether or not to sort results by their input position, in cases where `return_records?: true` was provided. The default value is `false`.\n  * `:return_records?` (`t:boolean/0`) - Whether or not to return all of the records that were inserted. Defaults to false to account for large inserts. The default value is `false`.\n  * `:return_errors?` (`t:boolean/0`) - Whether or not to return all of the errors that occur. Defaults to false to account for large inserts. The default value is `false`.\n  * `:batch_size` (`t:pos_integer/0`) - The number of records to include in each batch. Defaults to the `default_limit`\n    or `max_page_size` of the action, or 100.\n  * `:return_stream?` (`t:boolean/0`) - If set to `true`, instead of an `Ash.BulkResult`, a mixed stream is returned.\n    Potential elements:\n    `{:notification, notification}` - if `return_notifications?` is set to `true`\n    `{:ok, record}` - if `return_records?` is set to `true`\n    `{:error, error}` - an error that occurred. May be changeset or an individual error.\n    The default value is `false`.\n  * `:return_nothing?` (`t:boolean/0`) - Mutes warnings about returning nothing.\n    Only relevant if `return_stream?` is set to `true` and all other\n    `return_*?` options are set to `false`.\n    The default value is `false`.\n  * `:stop_on_error?` (`t:boolean/0`) - If true, the first encountered error will stop the action and be returned. Otherwise, errors\n    will be skipped. The default value is `false`.\n  * `:notify?` (`t:boolean/0`) - Whether or not to generate any notifications. If this is set to `true` then the data layer must return\n    the results from each batch. This may be intensive for large bulk actions.\n    Notifications will be automatically sent unless `return_notifications?` is set to `true`.\n    The default value is `false`.\n  * `:transaction` - Whether or not to wrap the entire execution in a transaction, each batch, or not at all.\n    Keep in mind:\n    `before_transaction` and `after_transaction` hooks attached to changesets will have to be run\n    *inside* the transaction if you choose `transaction: :all`.\n    The default value is `:batch`.\n  * `:max_concurrency` (`t:non_neg_integer/0`) - If set to a value greater than 0, up to that many tasks will be started to run batches asynchronously The default value is `0`.","ref":"CaseManager.Teams.html#register_user!/2-options"},{"type":"function","title":"CaseManager.Teams.search_teams/3","doc":"Calls the search action on CaseManager.Teams.Team.","ref":"CaseManager.Teams.html#search_teams/3"},{"type":"function","title":"Options - CaseManager.Teams.search_teams/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#search_teams/3-options"},{"type":"function","title":"CaseManager.Teams.search_teams!/3","doc":"Calls the search action on CaseManager.Teams.Team.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#search_teams!/3"},{"type":"function","title":"Options - CaseManager.Teams.search_teams!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#search_teams!/3-options"},{"type":"function","title":"CaseManager.Teams.search_users/3","doc":"Calls the search action on CaseManager.Teams.User.","ref":"CaseManager.Teams.html#search_users/3"},{"type":"function","title":"Options - CaseManager.Teams.search_users/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#search_users/3-options"},{"type":"function","title":"CaseManager.Teams.search_users!/3","doc":"Calls the search action on CaseManager.Teams.User.\nRaises any errors instead of returning them","ref":"CaseManager.Teams.html#search_users!/3"},{"type":"function","title":"Options - CaseManager.Teams.search_users!/3","doc":"* `:page` - Pagination options, see `Ash.read/2` for more.\n* `:load` (`t:term/0`) - A load statement to add onto the query\n* `:max_concurrency` (`t:non_neg_integer/0`) - The maximum number of processes allowed to be started for parallel loading of relationships and calculations. Defaults to `System.schedulers_online() * 2`\n* `:lock` (`t:term/0`) - A lock statement to add onto the query\n* `:return_query?` (`t:boolean/0`) - If `true`, the query that was ultimately used is returned as a third tuple element.  \n  The query goes through many potential changes during a request, potentially adding\n  authorization filters, or replacing relationships for other data layers with their\n  corresponding ids. This option can be used to get the true query that was sent to\n  the data layer. The default value is `false`.\n* `:skip_unknown_inputs` - A list of inputs that, if provided, will be ignored if they are not recognized by the action. Use `:*` to indicate all unknown keys.\n* `:reuse_values?` (`t:boolean/0`) - Whether calculations are allowed to reuse values that have already been loaded, or must refetch them from the data layer. The default value is `false`.\n* `:strict?` (`t:boolean/0`) - If set to true, only specified attributes will be loaded when passing\n    a list of fields to fetch on a relationship, which allows for more\n    optimized data-fetching.  \n    See `Ash.Query.load/2`. The default value is `false`.\n* `:authorize_with` - If set to `:error`, instead of applying authorization filters as a filter, any records not matching the authorization filter will cause an error to be returned. Valid values are :filter, :error The default value is `:filter`.\n* `:timeout` (`t:timeout/0`) - A positive integer, or `:infinity`. If none is provided, the timeout configured on the domain is used.\n* `:tracer` (one or a list of module that adopts `Ash.Tracer`) - A tracer that implements the `Ash.Tracer` behaviour. See that module for more.\n* `:action` (`t:term/0`) - The action to use, either an Action struct or the name of the action\n* `:authorize?` - If an actor option is provided (even if it is `nil`), authorization happens automatically. If not, this flag can be used to authorize with no user. Valid values are true, false, nil\n* `:context` (`t:map/0`) - Context to set on the query, changeset, or input\n* `:tenant` (value that implements the `Ash.ToTenant` protocol) - A tenant to set on the query or changeset\n* `:actor` (`t:term/0`) - If an actor is provided, it will be used in conjunction with the authorizers of a resource to authorize access\n* `:scope` (`t:term/0`) - A value that implements the `Ash.Scope.ToOpts` protocol, for passing around actor/tenant/context in a single value. See `Ash.Scope.ToOpts` for more.\n* `:query` - A query to seed the action with.\n* `:not_found_error?` (`t:boolean/0`) - Whether or not to return or raise a `NotFound` error or to return `nil` when a get? action/interface is called.\n* `:stream?` (`t:boolean/0`) - If true, a stream of the results will be returned The default value is `false`.\n* `:stream_options` (`t:keyword/0`) - Options passed to `Ash.stream!`, if `stream?: true` is given\n  * `:batch_size` (`t:integer/0`) - How many records to request in each query run. Defaults to the pagination limits on the resource, or 250.\n  * `:allow_stream_with` - The 'worst' strategy allowed to be used to fetch records. See `Ash.stream!/2` docs for more. The default value is `:keyset`.\n  * `:stream_with` - The specific strategy to use to fetch records. See `Ash.stream!/2` docs for more.","ref":"CaseManager.Teams.html#search_users!/3-options"},{"type":"module","title":"CaseManager.Teams.Secrets","doc":"Helper module to fetch the secret needed for Ash authentication to work.","ref":"CaseManager.Teams.Secrets.html"},{"type":"module","title":"CaseManager.Teams.Token","doc":"Resource representing a user token.","ref":"CaseManager.Teams.Token.html"},{"type":"function","title":"CaseManager.Teams.Token.default_short_name/0","doc":"","ref":"CaseManager.Teams.Token.html#default_short_name/0"},{"type":"function","title":"CaseManager.Teams.Token.input/1","doc":"Validates that the keys in the provided input are valid for at least one action on the resource.\n\nRaises a KeyError error at compile time if not. This exists because generally a struct should only ever\nbe created by Ash as a result of a successful action. You should not be creating records manually in code,\ne.g `%MyResource{value: 1, value: 2}`. Generally that is fine, but often with embedded resources it is nice\nto be able to validate the keys that are being provided, e.g\n\n```elixir\nResource\n|> Ash.Changeset.for_create(:create, %{embedded: EmbeddedResource.input(foo: 1, bar: 2)})\n|> Ash.create()\n```","ref":"CaseManager.Teams.Token.html#input/1"},{"type":"function","title":"CaseManager.Teams.Token.input/2","doc":"Same as `input/1`, except restricts the keys to values accepted by the action provided.","ref":"CaseManager.Teams.Token.html#input/2"},{"type":"function","title":"CaseManager.Teams.Token.primary_key_matches?/2","doc":"","ref":"CaseManager.Teams.Token.html#primary_key_matches?/2"},{"type":"type","title":"CaseManager.Teams.Token.t/0","doc":"","ref":"CaseManager.Teams.Token.html#t:t/0"},{"type":"module","title":"CaseManagerWeb","doc":"The entrypoint for defining your web interface, such\nas controllers, components, channels, and so on.\n\nThis can be used in your application as:\n\n    use CaseManagerWeb, :controller\n    use CaseManagerWeb, :html\n\nThe definitions below will be executed for every controller,\ncomponent, etc, so keep them short and clean, focused\non imports, uses and aliases.\n\nDo NOT define functions inside the quoted expressions\nbelow. Instead, define additional modules and import\nthose modules here.","ref":"CaseManagerWeb.html"},{"type":"macro","title":"CaseManagerWeb.__using__/1","doc":"When used, dispatch to the appropriate controller/view/etc.","ref":"CaseManagerWeb.html#__using__/1"},{"type":"function","title":"CaseManagerWeb.channel/0","doc":"","ref":"CaseManagerWeb.html#channel/0"},{"type":"function","title":"CaseManagerWeb.controller/0","doc":"","ref":"CaseManagerWeb.html#controller/0"},{"type":"function","title":"CaseManagerWeb.html/0","doc":"","ref":"CaseManagerWeb.html#html/0"},{"type":"function","title":"CaseManagerWeb.live_component/0","doc":"","ref":"CaseManagerWeb.html#live_component/0"},{"type":"function","title":"CaseManagerWeb.live_view/0","doc":"","ref":"CaseManagerWeb.html#live_view/0"},{"type":"function","title":"CaseManagerWeb.router/0","doc":"","ref":"CaseManagerWeb.html#router/0"},{"type":"function","title":"CaseManagerWeb.static_paths/0","doc":"","ref":"CaseManagerWeb.html#static_paths/0"},{"type":"function","title":"CaseManagerWeb.verified_routes/0","doc":"","ref":"CaseManagerWeb.html#verified_routes/0"},{"type":"module","title":"CaseManagerWeb.AlertModal","doc":"Provides a modal displaying an alert.","ref":"CaseManagerWeb.AlertModal.html"},{"type":"function","title":"CaseManagerWeb.AlertModal.alert_modal/1","doc":"","ref":"CaseManagerWeb.AlertModal.html#alert_modal/1"},{"type":"function","title":"Attributes - CaseManagerWeb.AlertModal.alert_modal/1","doc":"* `id` (`:string`) - Defaults to `\"alert_modal\"`.\n* `show` (`:boolean`) - Defaults to `false`.\n* `on_cancel` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.\n* `alert` (`:map`) (required) - alert to be displayed.","ref":"CaseManagerWeb.AlertModal.html#alert_modal/1-attributes"},{"type":"module","title":"CaseManagerWeb.AshJsonApiRouter","doc":"JsonApi Router for CaseManager","ref":"CaseManagerWeb.AshJsonApiRouter.html"},{"type":"function","title":"CaseManagerWeb.AshJsonApiRouter.call/2","doc":"Callback implementation for  Plug.call/2 .","ref":"CaseManagerWeb.AshJsonApiRouter.html#call/2"},{"type":"function","title":"CaseManagerWeb.AshJsonApiRouter.domains/0","doc":"","ref":"CaseManagerWeb.AshJsonApiRouter.html#domains/0"},{"type":"function","title":"CaseManagerWeb.AshJsonApiRouter.init/1","doc":"Callback implementation for  Plug.init/1 .","ref":"CaseManagerWeb.AshJsonApiRouter.html#init/1"},{"type":"function","title":"CaseManagerWeb.AshJsonApiRouter.spec/0","doc":"","ref":"CaseManagerWeb.AshJsonApiRouter.html#spec/0"},{"type":"module","title":"CaseManagerWeb.AuthController","doc":"","ref":"CaseManagerWeb.AuthController.html"},{"type":"module","title":"CaseManagerWeb.AuthHTML","doc":"","ref":"CaseManagerWeb.AuthHTML.html"},{"type":"module","title":"CaseManagerWeb.AuthLive.SignInForm","doc":"LiveComponent to show a form for logging in.","ref":"CaseManagerWeb.AuthLive.SignInForm.html"},{"type":"function","title":"CaseManagerWeb.AuthLive.SignInForm.render/1","doc":"Callback implementation for  Phoenix.LiveComponent.render/1 .","ref":"CaseManagerWeb.AuthLive.SignInForm.html#render/1"},{"type":"module","title":"CaseManagerWeb.Back","doc":"Provides a back navigation link.","ref":"CaseManagerWeb.Back.html"},{"type":"function","title":"CaseManagerWeb.Back.back/1","doc":"Renders a back navigation link.","ref":"CaseManagerWeb.Back.html#back/1"},{"type":"function","title":"Examples - CaseManagerWeb.Back.back/1","doc":"<.back navigate={~p\"/posts\"}>Back to posts</.back>","ref":"CaseManagerWeb.Back.html#back/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.Back.back/1","doc":"* `navigate` (`:any`) (required)","ref":"CaseManagerWeb.Back.html#back/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Back.back/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.Back.html#back/1-slots"},{"type":"module","title":"CaseManagerWeb.BadgeTemplate","doc":"Provides a bagde for showing things like severity level.","ref":"CaseManagerWeb.BadgeTemplate.html"},{"type":"function","title":"CaseManagerWeb.BadgeTemplate.badge_template/1","doc":"Renders a badge template.","ref":"CaseManagerWeb.BadgeTemplate.html#badge_template/1"},{"type":"function","title":"Attributes - CaseManagerWeb.BadgeTemplate.badge_template/1","doc":"* `icon_name` (`:string`) - name of hero icon used lhs. Defaults to `nil`.\n* `label` (`:string`) - label written on badge. Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted.","ref":"CaseManagerWeb.BadgeTemplate.html#badge_template/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.BadgeTemplate.badge_template/1","doc":"* `inner_block`","ref":"CaseManagerWeb.BadgeTemplate.html#badge_template/1-slots"},{"type":"module","title":"CaseManagerWeb.BtnTemplate","doc":"Provides a very general button UI component.","ref":"CaseManagerWeb.BtnTemplate.html"},{"type":"function","title":"CaseManagerWeb.BtnTemplate.btn_template/1","doc":"Renders a button template.\n\nButtons come in three colors – primary, secondary, and critical.\nBy default, the primary color is used, but the color may\nbe applied by using the color parameter.","ref":"CaseManagerWeb.BtnTemplate.html#btn_template/1"},{"type":"function","title":"Examples - CaseManagerWeb.BtnTemplate.btn_template/1","doc":"<.btn_template>Send!</.button>\n    <.btn_template phx-click=\"go\" class=\"ml-2\">Send!</.btn_template>","ref":"CaseManagerWeb.BtnTemplate.html#btn_template/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.BtnTemplate.btn_template/1","doc":"* `colour` (`:atom`) - Defaults to `:primary`. Must be one of `:primary`, `:secondary`, `:tertiary`, `:disabled`, or `:critical`.\n* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\"]`.","ref":"CaseManagerWeb.BtnTemplate.html#btn_template/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.BtnTemplate.btn_template/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.BtnTemplate.html#btn_template/1-slots"},{"type":"module","title":"CaseManagerWeb.Button","doc":"Provides a custom button UI component.","ref":"CaseManagerWeb.Button.html"},{"type":"function","title":"CaseManagerWeb.Button.button/1","doc":"Renders a custom button with content. \n\nCustom buttons come with a hero icon if the icon_name atribute is specified.\n\nThe text of the button can either be specified using the default slot or the txt attribute.\n\nCustom buttons come in three colors – primary, secondary, and critical.\nBy default, the primary color is used, but the color may\nbe applied by using the color parameter.\n\n# Examples\n      \n    <.button txt=\"Simple primary text button\" />\n    <.button icon_name=\"hero-user-plus\">Simple primary button with icon</.button>\n    <.button color=\"secondary\" txt=\"Simple secondary text button\" />\n    <.button color=\"critical\" txt=\"Simple critical text button\" />\n    <.button disabled txt=\"Simple disabled text button\" phx-click=\"show_modal\" />\n    <.button color=\"disabled\" txt=\"Simple disabled text button\" phx-click=\"show_modal\" />","ref":"CaseManagerWeb.Button.html#button/1"},{"type":"function","title":"Attributes - CaseManagerWeb.Button.button/1","doc":"* `colour` (`:atom`) - Defaults to `:primary`. Must be one of `:primary`, `:secondary`, `:tertiary`, `:disabled`, or `:critical`.\n* `icon_name` (`:string`) - name of hero icon used lhs. Defaults to `nil`.\n* `label` (`:string`) - text written on button. Defaults to `nil`.\n* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\"]`.","ref":"CaseManagerWeb.Button.html#button/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Button.button/1","doc":"* `inner_block`","ref":"CaseManagerWeb.Button.html#button/1-slots"},{"type":"module","title":"CaseManagerWeb.ConfirmationModal","doc":"Provides a modal prompting the user for a confirmation of an action.","ref":"CaseManagerWeb.ConfirmationModal.html"},{"type":"function","title":"CaseManagerWeb.ConfirmationModal.confirmation_modal/1","doc":"","ref":"CaseManagerWeb.ConfirmationModal.html#confirmation_modal/1"},{"type":"function","title":"Attributes - CaseManagerWeb.ConfirmationModal.confirmation_modal/1","doc":"* `id` (`:string`) - Defaults to `\"confirmation_modal\"`.\n* `show` (`:boolean`) - Defaults to `false`.\n* `on_cancel` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.\n* `on_action` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.\n* `action_btn_txt` (`:string`) (required) - verb confirming the action.\n* `title` (`:string`) (required) - a  ? describing what action the user is confirming.\n* `body` (`:string`) - concise text informing the user that the action is irreversible. Defaults to `\"This can't be undone\"`.","ref":"CaseManagerWeb.ConfirmationModal.html#confirmation_modal/1-attributes"},{"type":"module","title":"CaseManagerWeb.CoreJsCmds","doc":"Provides JS Commands that are generic enough to be used by different types of component.","ref":"CaseManagerWeb.CoreJsCmds.html"},{"type":"function","title":"CaseManagerWeb.CoreJsCmds.hide/2","doc":"","ref":"CaseManagerWeb.CoreJsCmds.html#hide/2"},{"type":"function","title":"CaseManagerWeb.CoreJsCmds.show/2","doc":"","ref":"CaseManagerWeb.CoreJsCmds.html#show/2"},{"type":"module","title":"CaseManagerWeb.CreateUserForm","doc":"LiveComponent to show a form for creating a user.","ref":"CaseManagerWeb.CreateUserForm.html"},{"type":"function","title":"CaseManagerWeb.CreateUserForm.render/1","doc":"Callback implementation for  Phoenix.LiveComponent.render/1 .","ref":"CaseManagerWeb.CreateUserForm.html#render/1"},{"type":"module","title":"CaseManagerWeb.DataList","doc":"Provides a data list","ref":"CaseManagerWeb.DataList.html"},{"type":"function","title":"CaseManagerWeb.DataList.list/1","doc":"Renders a data list.","ref":"CaseManagerWeb.DataList.html#list/1"},{"type":"function","title":"Examples - CaseManagerWeb.DataList.list/1","doc":"<.list>\n      <:item title=\"Title\"><%= @post.title %></:item>\n      <:item title=\"Views\"><%= @post.views %></:item>\n    </.list>","ref":"CaseManagerWeb.DataList.html#list/1-examples"},{"type":"function","title":"Slots - CaseManagerWeb.DataList.list/1","doc":"* `item` (required) - Accepts attributes:\n\n  * `title` (`:string`) (required)","ref":"CaseManagerWeb.DataList.html#list/1-slots"},{"type":"module","title":"CaseManagerWeb.Endpoint","doc":"","ref":"CaseManagerWeb.Endpoint.html"},{"type":"function","title":"CaseManagerWeb.Endpoint.broadcast/3","doc":"Callback implementation for  Phoenix.Endpoint.broadcast/3 .","ref":"CaseManagerWeb.Endpoint.html#broadcast/3"},{"type":"function","title":"CaseManagerWeb.Endpoint.broadcast!/3","doc":"Callback implementation for  Phoenix.Endpoint.broadcast!/3 .","ref":"CaseManagerWeb.Endpoint.html#broadcast!/3"},{"type":"function","title":"CaseManagerWeb.Endpoint.broadcast_from/4","doc":"Callback implementation for  Phoenix.Endpoint.broadcast_from/4 .","ref":"CaseManagerWeb.Endpoint.html#broadcast_from/4"},{"type":"function","title":"CaseManagerWeb.Endpoint.broadcast_from!/4","doc":"Callback implementation for  Phoenix.Endpoint.broadcast_from!/4 .","ref":"CaseManagerWeb.Endpoint.html#broadcast_from!/4"},{"type":"function","title":"CaseManagerWeb.Endpoint.call/2","doc":"Callback implementation for  Plug.call/2 .","ref":"CaseManagerWeb.Endpoint.html#call/2"},{"type":"function","title":"CaseManagerWeb.Endpoint.child_spec/1","doc":"Returns the child specification to start the endpoint\nunder a supervision tree.","ref":"CaseManagerWeb.Endpoint.html#child_spec/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.config/2","doc":"Returns the endpoint configuration for `key`\n\nReturns `default` if the key does not exist.","ref":"CaseManagerWeb.Endpoint.html#config/2"},{"type":"function","title":"CaseManagerWeb.Endpoint.config_change/2","doc":"Reloads the configuration given the application environment changes.","ref":"CaseManagerWeb.Endpoint.html#config_change/2"},{"type":"function","title":"CaseManagerWeb.Endpoint.host/0","doc":"Returns the host for the given endpoint.","ref":"CaseManagerWeb.Endpoint.html#host/0"},{"type":"function","title":"CaseManagerWeb.Endpoint.init/1","doc":"Callback implementation for  Plug.init/1 .","ref":"CaseManagerWeb.Endpoint.html#init/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.local_broadcast/3","doc":"Callback implementation for  Phoenix.Endpoint.local_broadcast/3 .","ref":"CaseManagerWeb.Endpoint.html#local_broadcast/3"},{"type":"function","title":"CaseManagerWeb.Endpoint.local_broadcast_from/4","doc":"Callback implementation for  Phoenix.Endpoint.local_broadcast_from/4 .","ref":"CaseManagerWeb.Endpoint.html#local_broadcast_from/4"},{"type":"function","title":"CaseManagerWeb.Endpoint.path/1","doc":"Generates the path information when routing to this endpoint.","ref":"CaseManagerWeb.Endpoint.html#path/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.script_name/0","doc":"Generates the script name.","ref":"CaseManagerWeb.Endpoint.html#script_name/0"},{"type":"function","title":"CaseManagerWeb.Endpoint.server_info/1","doc":"Returns the address and port that the server is running on","ref":"CaseManagerWeb.Endpoint.html#server_info/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.start_link/1","doc":"Starts the endpoint supervision tree.\n\nAll other options are merged into the endpoint configuration.","ref":"CaseManagerWeb.Endpoint.html#start_link/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.static_integrity/1","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file\nin `priv/static`. Meant to be used for Subresource Integrity with CDNs.","ref":"CaseManagerWeb.Endpoint.html#static_integrity/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.static_lookup/1","doc":"Returns a two item tuple with the first item being the `static_path`\nand the second item being the `static_integrity`.","ref":"CaseManagerWeb.Endpoint.html#static_lookup/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.static_path/1","doc":"Generates a route to a static file in `priv/static`.","ref":"CaseManagerWeb.Endpoint.html#static_path/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.static_url/0","doc":"Generates the static URL without any path information.\n\nIt uses the configuration under `:static_url` to generate\nsuch. It falls back to `:url` if `:static_url` is not set.","ref":"CaseManagerWeb.Endpoint.html#static_url/0"},{"type":"function","title":"CaseManagerWeb.Endpoint.struct_url/0","doc":"Generates the endpoint base URL but as a `URI` struct.\n\nIt uses the configuration under `:url` to generate such.\nUseful for manipulating the URL data and passing it to\nURL helpers.","ref":"CaseManagerWeb.Endpoint.html#struct_url/0"},{"type":"function","title":"CaseManagerWeb.Endpoint.subscribe/2","doc":"Callback implementation for  Phoenix.Endpoint.subscribe/2 .","ref":"CaseManagerWeb.Endpoint.html#subscribe/2"},{"type":"function","title":"CaseManagerWeb.Endpoint.unsubscribe/1","doc":"Callback implementation for  Phoenix.Endpoint.unsubscribe/1 .","ref":"CaseManagerWeb.Endpoint.html#unsubscribe/1"},{"type":"function","title":"CaseManagerWeb.Endpoint.url/0","doc":"Generates the endpoint base URL without any path information.\n\nIt uses the configuration under `:url` to generate such.","ref":"CaseManagerWeb.Endpoint.html#url/0"},{"type":"module","title":"CaseManagerWeb.Error","doc":"Provides a generic error message.","ref":"CaseManagerWeb.Error.html"},{"type":"function","title":"CaseManagerWeb.Error.error/1","doc":"Generates a generic error message.","ref":"CaseManagerWeb.Error.html#error/1"},{"type":"function","title":"Slots - CaseManagerWeb.Error.error/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.Error.html#error/1-slots"},{"type":"function","title":"CaseManagerWeb.Error.translate_error/1","doc":"Translates an error message using gettext.","ref":"CaseManagerWeb.Error.html#translate_error/1"},{"type":"function","title":"CaseManagerWeb.Error.translate_errors/2","doc":"Translates the errors for a field from a keyword list of errors.","ref":"CaseManagerWeb.Error.html#translate_errors/2"},{"type":"module","title":"CaseManagerWeb.ErrorHTML","doc":"","ref":"CaseManagerWeb.ErrorHTML.html"},{"type":"function","title":"CaseManagerWeb.ErrorHTML.render/2","doc":"","ref":"CaseManagerWeb.ErrorHTML.html#render/2"},{"type":"module","title":"CaseManagerWeb.ErrorJSON","doc":"","ref":"CaseManagerWeb.ErrorJSON.html"},{"type":"function","title":"CaseManagerWeb.ErrorJSON.render/2","doc":"","ref":"CaseManagerWeb.ErrorJSON.html#render/2"},{"type":"module","title":"CaseManagerWeb.FileController","doc":"","ref":"CaseManagerWeb.FileController.html"},{"type":"function","title":"CaseManagerWeb.FileController.download/2","doc":"","ref":"CaseManagerWeb.FileController.html#download/2"},{"type":"module","title":"CaseManagerWeb.Flash","doc":"Provides flash notices.","ref":"CaseManagerWeb.Flash.html"},{"type":"function","title":"CaseManagerWeb.Flash.flash/1","doc":"Renders flash notices.","ref":"CaseManagerWeb.Flash.html#flash/1"},{"type":"function","title":"Examples - CaseManagerWeb.Flash.flash/1","doc":"<.flash kind={:info} flash={@flash} />\n    <.flash kind={:info} phx-mounted={show(\"#flash\")}>Welcome Back!</.flash>","ref":"CaseManagerWeb.Flash.html#flash/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.Flash.flash/1","doc":"* `id` (`:string`) - the optional id of flash container.\n* `flash` (`:map`) - the map of flash messages to display. Defaults to `%{}`.\n* `title` (`:string`) - Defaults to `nil`.\n* `kind` (`:atom`) - used for styling and flash lookup. Must be one of `:info`, or `:error`.\n* Global attributes are accepted. the arbitrary HTML attributes to add to the flash container.","ref":"CaseManagerWeb.Flash.html#flash/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Flash.flash/1","doc":"* `inner_block` - the optional inner block that renders the flash message.","ref":"CaseManagerWeb.Flash.html#flash/1-slots"},{"type":"module","title":"CaseManagerWeb.FlashGroup","doc":"Provides a flash group with standard titles and content.","ref":"CaseManagerWeb.FlashGroup.html"},{"type":"function","title":"CaseManagerWeb.FlashGroup.flash_group/1","doc":"Shows the flash group with standard titles and content.","ref":"CaseManagerWeb.FlashGroup.html#flash_group/1"},{"type":"function","title":"Examples - CaseManagerWeb.FlashGroup.flash_group/1","doc":"<.flash_group flash={@flash} />","ref":"CaseManagerWeb.FlashGroup.html#flash_group/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.FlashGroup.flash_group/1","doc":"* `flash` (`:map`) (required) - the map of flash messages.\n* `id` (`:string`) - the optional id of flash container. Defaults to `\"flash-group\"`.","ref":"CaseManagerWeb.FlashGroup.html#flash_group/1-attributes"},{"type":"module","title":"CaseManagerWeb.Gettext","doc":"A module providing Internationalization with a gettext-based API.\n\nBy using [Gettext](https://hexdocs.pm/gettext),\nyour module gains a set of macros for translations, for example:\n\n    import CaseManagerWeb.Gettext\n\n    # Simple translation\n    gettext(\"Here is the string to translate\")\n\n    # Plural translation\n    ngettext(\"Here is the string to translate\",\n             \"Here are the strings to translate\",\n             3)\n\n    # Domain-based translation\n    dgettext(\"errors\", \"Here is the error message to translate\")\n\nSee the [Gettext Docs](https://hexdocs.pm/gettext) for detailed usage.","ref":"CaseManagerWeb.Gettext.html"},{"type":"function","title":"CaseManagerWeb.Gettext.handle_missing_bindings/2","doc":"Callback implementation for  Gettext.Backend.handle_missing_bindings/2 .","ref":"CaseManagerWeb.Gettext.html#handle_missing_bindings/2"},{"type":"function","title":"CaseManagerWeb.Gettext.handle_missing_plural_translation/7","doc":"Callback implementation for  Gettext.Backend.handle_missing_plural_translation/7 .","ref":"CaseManagerWeb.Gettext.html#handle_missing_plural_translation/7"},{"type":"function","title":"CaseManagerWeb.Gettext.handle_missing_translation/5","doc":"Callback implementation for  Gettext.Backend.handle_missing_translation/5 .","ref":"CaseManagerWeb.Gettext.html#handle_missing_translation/5"},{"type":"module","title":"CaseManagerWeb.Header","doc":"Provides a header with title","ref":"CaseManagerWeb.Header.html"},{"type":"function","title":"CaseManagerWeb.Header.header/1","doc":"Renders a header with title.","ref":"CaseManagerWeb.Header.html#header/1"},{"type":"function","title":"Attributes - CaseManagerWeb.Header.header/1","doc":"* `class` (`:string`) - Defaults to `nil`.","ref":"CaseManagerWeb.Header.html#header/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Header.header/1","doc":"* `inner_block` (required)\n* `subtitle`\n* `actions`","ref":"CaseManagerWeb.Header.html#header/1-slots"},{"type":"module","title":"CaseManagerWeb.Helpers","doc":"Module that defines helper function for the web-based part of the application.","ref":"CaseManagerWeb.Helpers.html"},{"type":"function","title":"CaseManagerWeb.Helpers.load_bg/0","doc":"Retrieves the background image from the database. If the image isn't set in the datbase\nthis function returns nil. This is to allow to use :if={@image} to check if this settings has been set.","ref":"CaseManagerWeb.Helpers.html#load_bg/0"},{"type":"function","title":"CaseManagerWeb.Helpers.load_logo/0","doc":"Retrieves the logo from the database. If the logo isn't set in the datbase\nthis function returns nil. This is to allow to use :if={@logo} to check if this settings has been set.","ref":"CaseManagerWeb.Helpers.html#load_logo/0"},{"type":"function","title":"CaseManagerWeb.Helpers.remove_empty/1","doc":"","ref":"CaseManagerWeb.Helpers.html#remove_empty/1"},{"type":"function","title":"CaseManagerWeb.Helpers.render_markdown!/1","doc":"Render basic HTML from text with markdown. All HTML tags are stripped before returning it as a raw value.","ref":"CaseManagerWeb.Helpers.html#render_markdown!/1"},{"type":"function","title":"CaseManagerWeb.Helpers.update_params/2","doc":"","ref":"CaseManagerWeb.Helpers.html#update_params/2"},{"type":"module","title":"CaseManagerWeb.Icon","doc":"Icons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.","ref":"CaseManagerWeb.Icon.html"},{"type":"function","title":"CaseManagerWeb.Icon.icon/1","doc":"Renders a [Heroicon](https://heroicons.com).\n\nHeroicons come in three styles – outline, solid, and mini.\nBy default, the outline style is used, but solid and mini may\nbe applied by using the `-solid` and `-mini` suffix.\n\nYou can customize the size and colors of the icons by setting\nwidth, height, and background color classes.\n\nIcons are extracted from the `deps/heroicons` directory and bundled within\nyour compiled app.css by the plugin in your `assets/tailwind.config.js`.","ref":"CaseManagerWeb.Icon.html#icon/1"},{"type":"function","title":"Examples - CaseManagerWeb.Icon.icon/1","doc":"<.icon name=\"hero-x-mark-solid\" />\n    <.icon name=\"hero-arrow-path\" class=\"ml-1 w-3 h-3 animate-spin\" />","ref":"CaseManagerWeb.Icon.html#icon/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.Icon.icon/1","doc":"* `name` (`:string`) (required)\n* `class` (`:string`) - Defaults to `nil`.","ref":"CaseManagerWeb.Icon.html#icon/1-attributes"},{"type":"module","title":"CaseManagerWeb.IconBtn","doc":"Provides a custom button that only displays an icon.","ref":"CaseManagerWeb.IconBtn.html"},{"type":"function","title":"CaseManagerWeb.IconBtn.icon_btn/1","doc":"Renders a square icon button.\n\nIcon buttons come in three colors – primary, secondary, and critical.\nBy default, the primary color is used, but the color may\nbe applied by using the color parameter.\n\nIcon buttons come in three sizes – large and small.\nBy default, the large size is used, but the size may\nbe applied by using the size parameter.","ref":"CaseManagerWeb.IconBtn.html#icon_btn/1"},{"type":"function","title":"Examples - CaseManagerWeb.IconBtn.icon_btn/1","doc":"<.icon_btn icon_name=\"hero-pause-circle\" colour=\"critical\" />\n    <.icon_btn icon_name=\"hero-arrow-top-right-on-square\" colour=\"secondary\" size=\"small\" class=\"pl-0.5 pb-1\" />","ref":"CaseManagerWeb.IconBtn.html#icon_btn/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.IconBtn.icon_btn/1","doc":"* `size` (`:atom`) - Defaults to `:large`. Must be one of `:large`, or `:small`.\n* `colour` (`:atom`) - Defaults to `:primary`. Must be one of `:primary`, `:secondary`, `:tertiary`, `:disabled`, or `:critical`.\n* `icon_name` (`:string`) (required)\n* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\"]`.","ref":"CaseManagerWeb.IconBtn.html#icon_btn/1-attributes"},{"type":"module","title":"CaseManagerWeb.Input","doc":"Provides insput components with label and error messages.","ref":"CaseManagerWeb.Input.html"},{"type":"function","title":"CaseManagerWeb.Input.input/1","doc":"Renders an input with label and error messages.\n\nA `Phoenix.HTML.FormField` may be passed as argument,\nwhich is used to retrieve the input name, id, and values.\nOtherwise all attributes may be passed explicitly.","ref":"CaseManagerWeb.Input.html#input/1"},{"type":"function","title":"Types - CaseManagerWeb.Input.input/1","doc":"This function accepts all HTML input types, considering that:\n\n  * You may also set `type=\"select\"` to render a ` ` tag\n\n  * `type=\"checkbox\"` is used exclusively to render boolean values\n\n  * For live file uploads, see `Phoenix.Component.live_file_input/1`\n\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\nfor more information.","ref":"CaseManagerWeb.Input.html#input/1-types"},{"type":"function","title":"Examples - CaseManagerWeb.Input.input/1","doc":"<.input field={@form[:email]} type=\"email\" />\n    <.input name=\"my-input\" errors={[\"oh no!\"]} />\n    <.input type=\"checkbox\" name=\"checkbox_name\" label=\"Text to checkbox\" />","ref":"CaseManagerWeb.Input.html#input/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.Input.input/1","doc":"* `id` (`:any`) - Defaults to `nil`.\n* `name` (`:any`)\n* `label` (`:string`) - Defaults to `nil`.\n* `value` (`:any`)\n* `type` (`:string`) - Defaults to `\"text\"`. Must be one of `\"checkbox\"`, `\"color\"`, `\"date\"`, `\"datetime-local\"`, `\"email\"`, `\"file\"`, `\"hidden\"`, `\"month\"`, `\"number\"`, `\"password\"`, `\"range\"`, `\"radio\"`, `\"search\"`, `\"select\"`, `\"tel\"`, `\"text\"`, `\"textarea\"`, `\"time\"`, `\"url\"`, or `\"week\"`.\n* `field` (`Phoenix.HTML.FormField`) - a form field struct retrieved from the form, for example: @form[:email].\n* `errors` (`:list`) - Defaults to `[]`.\n* `checked` (`:boolean`) - the checked flag for checkbox inputs.\n* `prompt` (`:string`) - the prompt for select inputs. Defaults to `nil`.\n* `options` (`:list`) - the options to pass to Phoenix.HTML.Form.options_for_select/2.\n* `multiple` (`:boolean`) - the multiple flag for select inputs. Defaults to `false`.\n* `class` (`:string`) - manually assigned classes. Defaults to `nil`.\n* Global attributes are accepted. Supports all globals plus: `[\"accept\", \"autocomplete\", \"capture\", \"cols\", \"disabled\", \"form\", \"list\", \"max\", \"maxlength\", \"min\", \"minlength\", \"multiple\", \"pattern\", \"placeholder\", \"readonly\", \"required\", \"rows\", \"size\", \"step\"]`.","ref":"CaseManagerWeb.Input.html#input/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Input.input/1","doc":"* `inner_block`","ref":"CaseManagerWeb.Input.html#input/1-slots"},{"type":"module","title":"CaseManagerWeb.Label","doc":"Provides a label","ref":"CaseManagerWeb.Label.html"},{"type":"function","title":"CaseManagerWeb.Label.label/1","doc":"Renders a label.","ref":"CaseManagerWeb.Label.html#label/1"},{"type":"function","title":"Attributes - CaseManagerWeb.Label.label/1","doc":"* `for` (`:string`) - Defaults to `nil`.","ref":"CaseManagerWeb.Label.html#label/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Label.label/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.Label.html#label/1-slots"},{"type":"module","title":"CaseManagerWeb.LiveUserAuth","doc":"Helpers for authenticating users in LiveViews.","ref":"CaseManagerWeb.LiveUserAuth.html"},{"type":"function","title":"CaseManagerWeb.LiveUserAuth.on_mount/4","doc":"","ref":"CaseManagerWeb.LiveUserAuth.html#on_mount/4"},{"type":"module","title":"CaseManagerWeb.MenuBar","doc":"Renders a menubar.","ref":"CaseManagerWeb.MenuBar.html"},{"type":"function","title":"CaseManagerWeb.MenuBar.menu_bar/1","doc":"","ref":"CaseManagerWeb.MenuBar.html#menu_bar/1"},{"type":"function","title":"Attributes - CaseManagerWeb.MenuBar.menu_bar/1","doc":"* `current_page` (`:atom`) (required) - the page the user is at.\n* `current_user` (`:map`) (required) - the user to check if customer or mssp.\n* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted.","ref":"CaseManagerWeb.MenuBar.html#menu_bar/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.MenuBar.menu_bar/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.MenuBar.html#menu_bar/1-slots"},{"type":"module","title":"CaseManagerWeb.ModalTemplate","doc":"Provides core UI components.\n\nAt first glance, this module may seem daunting, but its goal is to provide\ncore building blocks for your application, such as modals, tables, and\nforms. The components consist mostly of markup and are well-documented\nwith doc strings and declarative assigns. You may customize and style\nthem in any way you want, based on your application growth and needs.\n\nThe default components use Tailwind CSS, a utility-first CSS framework.\nSee the [Tailwind CSS documentation](https://tailwindcss.com) to learn\nhow to customize them or feel free to swap in another framework altogether.\n\nIcons are provided by [heroicons](https://heroicons.com). See `icon/1` for usage.","ref":"CaseManagerWeb.ModalTemplate.html"},{"type":"function","title":"CaseManagerWeb.ModalTemplate.hide_modal/2","doc":"","ref":"CaseManagerWeb.ModalTemplate.html#hide_modal/2"},{"type":"function","title":"CaseManagerWeb.ModalTemplate.modal_template/1","doc":"Renders a modal.","ref":"CaseManagerWeb.ModalTemplate.html#modal_template/1"},{"type":"function","title":"Examples - CaseManagerWeb.ModalTemplate.modal_template/1","doc":"<.modal id=\"confirm-modal\">\n      This is a modal.\n    </.modal>\n\nJS commands may be passed to the `:on_cancel` to configure\nthe closing/cancel event, for example:\n\n    <.modal id=\"confirm\" on_cancel={JS.navigate(~p\"/posts\")}>\n      This is another modal.\n    </.modal>","ref":"CaseManagerWeb.ModalTemplate.html#modal_template/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.ModalTemplate.modal_template/1","doc":"* `id` (`:string`) (required)\n* `show` (`:boolean`) - Defaults to `false`.\n* `on_cancel` (`Phoenix.LiveView.JS`) - Defaults to `%Phoenix.LiveView.JS{ops: []}`.","ref":"CaseManagerWeb.ModalTemplate.html#modal_template/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.ModalTemplate.modal_template/1","doc":"* `inner_block` (required)","ref":"CaseManagerWeb.ModalTemplate.html#modal_template/1-slots"},{"type":"function","title":"CaseManagerWeb.ModalTemplate.show_modal/2","doc":"","ref":"CaseManagerWeb.ModalTemplate.html#show_modal/2"},{"type":"module","title":"CaseManagerWeb.OnboardingController","doc":"","ref":"CaseManagerWeb.OnboardingController.html"},{"type":"function","title":"CaseManagerWeb.OnboardingController.create_team/2","doc":"","ref":"CaseManagerWeb.OnboardingController.html#create_team/2"},{"type":"function","title":"CaseManagerWeb.OnboardingController.create_user/2","doc":"","ref":"CaseManagerWeb.OnboardingController.html#create_user/2"},{"type":"function","title":"CaseManagerWeb.OnboardingController.index/2","doc":"","ref":"CaseManagerWeb.OnboardingController.html#index/2"},{"type":"module","title":"CaseManagerWeb.OnboardingHTML","doc":"","ref":"CaseManagerWeb.OnboardingHTML.html"},{"type":"function","title":"CaseManagerWeb.OnboardingHTML.index/1","doc":"","ref":"CaseManagerWeb.OnboardingHTML.html#index/1"},{"type":"module","title":"CaseManagerWeb.Plugs.Onboarding","doc":"Checks if the onboarding workflow should be run,","ref":"CaseManagerWeb.Plugs.Onboarding.html"},{"type":"function","title":"CaseManagerWeb.Plugs.Onboarding.call/2","doc":"","ref":"CaseManagerWeb.Plugs.Onboarding.html#call/2"},{"type":"function","title":"CaseManagerWeb.Plugs.Onboarding.init/1","doc":"","ref":"CaseManagerWeb.Plugs.Onboarding.html#init/1"},{"type":"module","title":"CaseManagerWeb.RiskBadge","doc":"Provides a badge showing risk or severity level.","ref":"CaseManagerWeb.RiskBadge.html"},{"type":"function","title":"CaseManagerWeb.RiskBadge.risk_badge/1","doc":"Renders a badge showing risk or severity level.\n\nSeverity come in five level – critical, high, medium, low and info.\nThis attribute is required.\n\n# Example\n\n    <.risk_badge colour={:critical} />\n    <.risk_badge colour={:high} />\n    <.risk_badge colour={:medium} />\n    <.risk_badge colour={:low} />\n    <.risk_badge colour={:info} />","ref":"CaseManagerWeb.RiskBadge.html#risk_badge/1"},{"type":"function","title":"Attributes - CaseManagerWeb.RiskBadge.risk_badge/1","doc":"* `colour` (`:atom`) (required) - Must be one of `:critical`, `:high`, `:medium`, `:low`, or `:info`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted.","ref":"CaseManagerWeb.RiskBadge.html#risk_badge/1-attributes"},{"type":"module","title":"CaseManagerWeb.Router","doc":"","ref":"CaseManagerWeb.Router.html"},{"type":"function","title":"CaseManagerWeb.Router.api/2","doc":"","ref":"CaseManagerWeb.Router.html#api/2"},{"type":"function","title":"CaseManagerWeb.Router.browser/2","doc":"","ref":"CaseManagerWeb.Router.html#browser/2"},{"type":"function","title":"CaseManagerWeb.Router.call/2","doc":"Callback invoked by Plug on every request.","ref":"CaseManagerWeb.Router.html#call/2"},{"type":"function","title":"CaseManagerWeb.Router.init/1","doc":"Callback required by Plug that initializes the router\nfor serving web requests.","ref":"CaseManagerWeb.Router.html#init/1"},{"type":"function","title":"CaseManagerWeb.Router.onboarding/2","doc":"","ref":"CaseManagerWeb.Router.html#onboarding/2"},{"type":"module","title":"CaseManagerWeb.SimpleForm","doc":"Provides a simple form","ref":"CaseManagerWeb.SimpleForm.html"},{"type":"function","title":"CaseManagerWeb.SimpleForm.simple_form/1","doc":"Renders a simple form.","ref":"CaseManagerWeb.SimpleForm.html#simple_form/1"},{"type":"function","title":"Examples - CaseManagerWeb.SimpleForm.simple_form/1","doc":"<.simple_form for={@form} phx-change=\"validate\" phx-submit=\"save\">\n      <.input field={@form[:email]} label=\"Email\"/>\n      <.input field={@form[:username]} label=\"Username\" />\n      <:actions>\n        <.button>Save</.button>\n      </:actions>\n    </.simple_form>","ref":"CaseManagerWeb.SimpleForm.html#simple_form/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.SimpleForm.simple_form/1","doc":"* `for` (`:any`) (required) - the datastructure for the form.\n* `as` (`:any`) - the server side parameter to collect all input under. Defaults to `nil`.\n* Global attributes are accepted. the arbitrary HTML attributes to apply to the form tag. Supports all globals plus: `[\"autocomplete\", \"name\", \"rel\", \"action\", \"enctype\", \"method\", \"novalidate\", \"target\", \"multipart\"]`.","ref":"CaseManagerWeb.SimpleForm.html#simple_form/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.SimpleForm.simple_form/1","doc":"* `inner_block` (required)\n* `actions` - the slot for form actions, such as a submit button.","ref":"CaseManagerWeb.SimpleForm.html#simple_form/1-slots"},{"type":"module","title":"CaseManagerWeb.StatusBadge","doc":"Provides a badge showing risk or severity level.","ref":"CaseManagerWeb.StatusBadge.html"},{"type":"function","title":"CaseManagerWeb.StatusBadge.status_badge/1","doc":"Renders a badge showing a status.\n\nStatus come in five categories – tpos (true-positive), benign, pend (pending), fpos (false-positive) and inprog (in progress).\nThis attribute is required.\n\n# Example\n\n    <.status_badge colour={:t_positive} />\n    <.status_badge colour={:benign} />\n    <.status_badge colour={:pending} />\n    <.status_badge colour={:f_positive} />\n    <.status_badge colour={:in_progress} />","ref":"CaseManagerWeb.StatusBadge.html#status_badge/1"},{"type":"function","title":"Attributes - CaseManagerWeb.StatusBadge.status_badge/1","doc":"* `colour` (`:atom`) (required) - Must be one of `:t_positive`, `:benign`, `:pending`, `:f_positive`, or `:in_progress`.\n* `class` (`:string`) - Defaults to `nil`.\n* Global attributes are accepted.","ref":"CaseManagerWeb.StatusBadge.html#status_badge/1-attributes"},{"type":"module","title":"CaseManagerWeb.Table","doc":"Provides a table.","ref":"CaseManagerWeb.Table.html"},{"type":"function","title":"CaseManagerWeb.Table.table/1","doc":"Renders a table with generic styling.","ref":"CaseManagerWeb.Table.html#table/1"},{"type":"function","title":"Examples - CaseManagerWeb.Table.table/1","doc":"<.table id=\"users\" rows={@users}>\n      <:col :let={user} label=\"id\"><%= user.id %></:col>\n      <:col :let={user} label=\"username\"><%= user.username %></:col>\n    </.table>","ref":"CaseManagerWeb.Table.html#table/1-examples"},{"type":"function","title":"Attributes - CaseManagerWeb.Table.table/1","doc":"* `id` (`:string`) (required)\n* `rows` (`:list`) (required)\n* `row_id` (`:any`) - the function for generating the row id. Defaults to `nil`.\n* `row_click` (`:any`) - the function for handling phx-click on each row. Defaults to `nil`.\n* `row_item` (`:any`) - the function for mapping each row before calling the :col and :action slots. Defaults to `&Function.identity/1`.","ref":"CaseManagerWeb.Table.html#table/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Table.table/1","doc":"* `col` (required) - Accepts attributes:\n\n  * `label` (`:any`)\n  * `width` (`:string`) - optionally specify a width if a fixed width is wanted. Otherwise it will space the column out automatically using the space available.\n  * `not_clickable_area?` (`:boolean`) - true if col contains a clickable item.\n* `action` - the slot for showing user actions in the last table column.","ref":"CaseManagerWeb.Table.html#table/1-slots"},{"type":"module","title":"CaseManagerWeb.Tooltip","doc":"Provides a hoverable item with a tooltip.","ref":"CaseManagerWeb.Tooltip.html"},{"type":"function","title":"CaseManagerWeb.Tooltip.tooltip/1","doc":"Renders a hoverable item with a tooltip.\n\n# Example\n\n    <.tooltip pos=\"right\" tooltip_txt=\"right tooltip\">Hoverable text</.tooltip>\n    <.tooltip pos=\"left\" tooltip_txt=\"left tooltip\">Hoverable text</.tooltip>\n    <.tooltip pos=\"top\" tooltip_txt=\"top tooltip\">Hoverable text</.tooltip>\n    <.tooltip pos=\"bottom\" tooltip_txt=\"bottom tooltip\">Hoverable text</.tooltip>\n\nThe hoverable item can be a clickable text.\n\n# Example \n  \n    <.tooltip pos=\"top\" tooltip_txt=\"right tooltip\">\n      <.txt_link phx-click=\"go\" txt=\"I am clickable text\" />\n    </.tooltip>","ref":"CaseManagerWeb.Tooltip.html#tooltip/1"},{"type":"function","title":"Attributes - CaseManagerWeb.Tooltip.tooltip/1","doc":"* `pos` (`:atom`) - Defaults to `:top`. Must be one of `:top`, `:bottom`, `:left`, or `:right`.\n* `tooltip_label` (`:string`) (required) - tooltip label.","ref":"CaseManagerWeb.Tooltip.html#tooltip/1-attributes"},{"type":"function","title":"Slots - CaseManagerWeb.Tooltip.tooltip/1","doc":"* `inner_block` (required) - Hoverable item, e.g. text or button.","ref":"CaseManagerWeb.Tooltip.html#tooltip/1-slots"},{"type":"module","title":"CaseManagerWeb.TxtLink","doc":"Provides a clickable underlined Text.","ref":"CaseManagerWeb.TxtLink.html"},{"type":"function","title":"CaseManagerWeb.TxtLink.txt_link/1","doc":"Renders an underlined text that is clickable.\n\n# Example\n  \n    <.txt_link phx-click=\"go\" txt=\"I am clickable text\" />","ref":"CaseManagerWeb.TxtLink.html#txt_link/1"},{"type":"function","title":"Attributes - CaseManagerWeb.TxtLink.txt_link/1","doc":"* `type` (`:string`) - Defaults to `nil`.\n* `class` (`:string`) - Defaults to `nil`.\n* `label` (`:string`) (required) - displayed label.\n* Global attributes are accepted. Supports all globals plus: `[\"disabled\"]`.","ref":"CaseManagerWeb.TxtLink.html#txt_link/1-attributes"},{"type":"extras","title":"CaseManager","doc":"# CaseManager\n\nTo start your Phoenix server:\n\n  * Run `mix setup` to install and setup dependencies\n  * Start Phoenix endpoint with `mix phx.server` or inside IEx with `iex -S mix phx.server`\n\nNow you can visit [`localhost:4000`](http://localhost:4000) from your browser.\n\nReady to run in production? Please [check our deployment guides](https://hexdocs.pm/phoenix/deployment.html).","ref":"readme.html"},{"type":"extras","title":"Learn more - CaseManager","doc":"* Official website: https://www.phoenixframework.org/\n  * Guides: https://hexdocs.pm/phoenix/overview.html\n  * Docs: https://hexdocs.pm/phoenix\n  * Forum: https://elixirforum.com/c/phoenix-forum\n  * Source: https://github.com/phoenixframework/phoenix","ref":"readme.html#learn-more"}],"content_type":"text/markdown","proglang":"elixir","producer":{"name":"ex_doc","version":"0.38.2"}}